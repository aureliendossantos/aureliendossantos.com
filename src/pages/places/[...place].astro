---
import { getCollection, type CollectionEntry } from "astro:content"
import PlacesLayout from "$layouts/PlacesLayout.astro"
import { getClosedStatus, getGoogleImage } from "$utils/places"
import { getPlacesData, type PlaceWithFetchDate } from "$utils/remoteData"
import getBlogPosts, { getDiary } from "$utils/getBlogPosts"
import ArticleDate from "$components/ArticleDate.astro"
import getPalette from "$utils/palettes"

export async function getStaticPaths() {
	const places = await getCollection("places")
	const googleMapsData = await getPlacesData(new URL(`../../../public/`, import.meta.url).href)
	return places.map((place) => ({
		params: { place: place.slug.split("/")[1] },
		props: { place, mapsData: googleMapsData.find((p) => p.place_id === place.data.id) },
	}))
}

interface Props {
	place: CollectionEntry<"places">
	mapsData: PlaceWithFetchDate
}
const { place, mapsData } = Astro.props

const articles = (await getBlogPosts()).filter((article) =>
	article.data.places.includes(place.slug)
)
const diaryEntries = (await getDiary()).filter((entry) => entry.data.places.includes(place.slug))

const { Content, headings } = await place.render()
const data = place.data

const headerImage = mapsData.photos[0].photo_reference
const gallery =
	mapsData.photos.length >= 3
		? mapsData.photos.slice(1, 5).map((photo) => photo.photo_reference)
		: undefined
---

<PlacesLayout ogType="article" title={data.title}>
	<div class="m-auto flex max-w-xl flex-col gap-8 text-zinc-900">
		<img
			class="h-80 w-full object-cover"
			src={getGoogleImage(800, headerImage)}
			data-zoomable
			data-zoom-src={getGoogleImage(1920, headerImage)}
		/>
		<div class="prose prose-sm prose-zinc px-8 small:prose-sm prose-h1:mb-2">
			<header>
				<h1>{data.title}</h1>
				<div class="not-prose font-work-sans text-sm text-zinc-400">
					{mapsData.editorial_summary && <p class="mb-2">{mapsData.editorial_summary.overview}</p>}
					<p class="mb-2">{getClosedStatus(mapsData)}</p>
					<p>
						{data.status == "done" ? "Déjà visité" : "Pas encore visité"}{
							data.review && (data.review == "loved" ? " et adoré" : " et aimé")
						}.
					</p>
				</div>
			</header>
			<main>
				<Content />
			</main>
			{
				articles.length > 0 && (
					<>
						<h2>Sur mon blog</h2>
						<div class="not-prose -mx-8 mt-8 flex flex-col">
							{articles.map((article) => {
								const palette = getPalette(article.data.palette)
								return (
									<a
										class="flex bg-[--bg] px-8 py-2 text-sm text-[--color] transition-all hover:brightness-110 hover:contrast-75"
										style={{
											"--color": palette.mainColor,
											"--bg": palette.backgroundColor,
										}}
										href={`/blog/${article.slug}`}
									>
										<div class="font-medium">{article.data.title}</div>
										<div class="grow" />
										<div>
											<ArticleDate date={article.data.date} yearOnly />
										</div>
									</a>
								)
							})}
						</div>
					</>
				)
			}
			{
				diaryEntries.length > 0 && (
					<>
						<h2>Dans mon journal</h2>
						<div class="not-prose -mx-8 mt-8 flex flex-col">
							{diaryEntries.map((entry) => {
								return (
									<a
										class="place flex bg-zinc-100 px-8 py-2 text-sm text-zinc-700 transition-colors hover:bg-zinc-200"
										href={`/diary/${entry.finalSlug}`}
									>
										<div class="font-medium">
											{entry.data.title}
											{entry.category == "trips" && (
												<img
													src="/footsteps.svg"
													alt="Icône de pas"
													class="mb-[0.15em] ml-1 inline-block h-[0.9em]"
												/>
											)}
										</div>
										<div class="grow" />
										{entry.data.date && (
											<div>
												<ArticleDate date={entry.data.date} yearOnly />
											</div>
										)}
									</a>
								)
							})}
						</div>
					</>
				)
			}
			{gallery && <h2>Photos de Google Maps</h2>}
		</div>
		{
			gallery && (
				<div class="grid grid-cols-2">
					{gallery.map((ref) => (
						<img
							class="h-56 w-full object-cover"
							src={getGoogleImage(400, ref)}
							data-zoomable
							data-zoom-src={getGoogleImage(1920, ref)}
						/>
					))}
				</div>
			)
		}
		<footer
			class="-mt-8 flex items-center justify-between gap-8 px-8 py-10 font-work-sans text-sm text-zinc-400"
		>
			<p class="min-w-fit">
				<a href="/places" class="hover:text-amber-700">← Lieux</a>
			</p>
			<p class="text-right">
				<a href={mapsData.url} target="_blank" class="hover:text-amber-700"
					>{mapsData.name} sur Google Maps</a
				>
			</p>
		</footer>
	</div>
</PlacesLayout>

<style is:global>
	.prose .bg-mention {
		@apply bg-zinc-200 hover:bg-zinc-300;
	}
	.prose .bg-mention img {
		@apply mb-[0.2em];
	}
</style>
