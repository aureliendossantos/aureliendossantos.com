---
import { CollectionEntry, getCollection } from "astro:content"
import PlacesLayout from "$layouts/PlacesLayout.astro"
import { getClosedStatus, getGoogleImage } from "$utils/places"
import { getPlacesData } from "$utils/remoteData"
import getBlogPosts from "$utils/getBlogPosts"
import ArticleDate from "$components/ArticleDate.astro"
import getPalette from "$utils/palettes"

export async function getStaticPaths() {
	const places = await getCollection("places")
	const googleMapsData = await getPlacesData(
		new URL(`../../../public/data/maps.json`, import.meta.url).href
	)
	return places.map((place) => ({
		params: { place: place.slug.split("/")[1] },
		props: { place, mapsData: googleMapsData.find((p) => p.place_id === place.data.id) },
	}))
}

export interface Props {
	place: CollectionEntry<"places">
	mapsData: google.maps.places.PlaceResult
}
const { place, mapsData } = Astro.props

const articles = (await getBlogPosts()).filter((article) =>
	article.data.places.includes(place.slug)
)

const { Content, headings } = await place.render()
const data = place.data
const category = place.slug.split("/")[0]

const headerImage = mapsData.photos[0].photo_reference
const gallery =
	mapsData.photos.length >= 3
		? mapsData.photos.slice(1, 5).map((photo) => photo.photo_reference)
		: undefined
---

<PlacesLayout ogType="article" title={data.title}>
	<div class="m-auto flex max-w-xl flex-col gap-8 text-zinc-900">
		<img
			class="h-80 w-full object-cover"
			src={getGoogleImage(800, headerImage)}
			data-zoomable
			data-zoom-src={getGoogleImage(1920, headerImage)}
		/>
		<div class="prose prose-sm prose-zinc px-8 small:prose-sm prose-h1:mb-2">
			<header>
				<h1>{data.title}</h1>
				<div class="not-prose font-work-sans text-sm text-zinc-400">
					<p>{getClosedStatus(mapsData)}</p>
					<p>
						{data.status == "done" ? "Visité" : "À visiter"}{
							data.review && (data.review == "loved" ? " et adoré" : " et aimé")
						}.
					</p>
				</div>
			</header>
			<main>
				<Content />
			</main>
			{
				articles.length > 0 && (
					<>
						<>
							<h2>Sur mon blog</h2>
							<div class="not-prose -mx-8 mt-8 flex flex-col">
								{articles.map((article) => {
									const palette = getPalette(article.data.palette)
									return (
										<a
											class="flex bg-[--bg] px-8 py-2 text-sm text-[--color] transition-all hover:brightness-110 hover:contrast-75"
											style={{
												"--color": palette.mainColor,
												"--bg": palette.backgroundColor,
											}}
											href={`/blog/${article.slug}`}
										>
											<div class="font-medium">{article.data.title}</div>
											<div class="grow" />
											<div>
												<ArticleDate date={article.data.date} yearOnly />
											</div>
										</a>
									)
								})}
							</div>
						</>
					</>
				)
			}
			{gallery && <h2>Photos des utilisateurs</h2>}
		</div>
		{
			gallery && (
				<div class="grid grid-cols-2">
					{gallery.map((ref) => (
						<img
							class="h-56 w-full object-cover"
							src={getGoogleImage(400, ref)}
							data-zoomable
							data-zoom-src={getGoogleImage(1920, ref)}
						/>
					))}
				</div>
			)
		}
		<footer
			class="-mt-8 flex items-center justify-between gap-8 px-8 py-10 font-work-sans text-sm text-zinc-400"
		>
			<p class="min-w-fit">
				<a href="/places" class="hover:text-amber-700">← Lieux</a>
			</p>
			<p class="text-right">
				<a href={mapsData.url} target="_blank" class="hover:text-amber-700"
					>{mapsData.name} sur Google Maps</a
				>
			</p>
		</footer>
	</div>
</PlacesLayout>

<style is:global>
	.prose .bg-mention {
		@apply bg-zinc-200 hover:bg-zinc-300;
	}
	.prose .bg-mention img {
		@apply mb-[0.2em];
	}
</style>
