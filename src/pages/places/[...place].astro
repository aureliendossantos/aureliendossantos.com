---
import { getCollection, type CollectionEntry, render } from "astro:content"
import DiaryLayout from "$layouts/DiaryLayout.astro"
import { getClosedStatus, getGoogleImage, getPlace } from "$utils/remoteData/googleMaps"
import { type PlaceWithFetchDate } from "$utils/remoteData/googleMaps"
import getBlogPosts, { getDiary } from "$utils/getCollection"
import ArticleDate from "$components/articles/ArticleDate.astro"
import getPalette, { getColor } from "$utils/design/palettes"
import FootstepsIcon from "$icons/ion/footsteps.svg"

export async function getStaticPaths() {
	const places = await getCollection("places")
	return await Promise.all(
		places.map(async (place) => ({
			params: { place: place.id },
			props: { place, mapsData: await getPlace(place.data.id) },
		}))
	)
}

interface Props {
	place: CollectionEntry<"places">
	mapsData: PlaceWithFetchDate
}
const { place, mapsData } = Astro.props

const renderReview = () => {
	switch (data.review) {
		case "loved":
			return " et adoré"
		case "liked":
			return " et aimé"
		case "disliked":
			return " mais pas aimé"
	}
}

const articles = (await getBlogPosts()).filter((article) =>
	article.data.places.find((p) => p.id == place.id)
)
const diaryEntries = (await getDiary()).filter((entry) =>
	entry.data.places.find((p) => p.id == place.id)
)

const { Content } = await render(place)
const data = place.data

const coverPath = await getGoogleImage(800, mapsData.photos[0].photo_reference)
const cover = {
	small: coverPath,
	large: coverPath.replace("-w800", "-w1600"),
}
const gallery =
	mapsData.photos.length >= 3
		? await Promise.all(
				mapsData.photos.slice(1, 5).map(async (photo) => {
					const path = await getGoogleImage(400, photo.photo_reference)
					return {
						small: path,
						large: path.replace("-w400", "-w1600"),
					}
				})
			)
		: undefined
---

<DiaryLayout
	ogType="article"
	title={data.title}
	navBarProps={{ title: data.title, parent: { title: "Lieux", href: "/places" } }}
>
	<div class="m-auto flex max-w-xl flex-col gap-8 text-zinc-900">
		<img
			class="h-80 w-full object-cover"
			src={cover.small}
			data-zoomable
			data-zoom-src={cover.large}
		/>
		<div class="prose prose-sm prose-zinc px-8 small:prose-sm prose-h1:mb-2">
			<header>
				<h1>{data.title}</h1>
				<div class="not-prose font-work-sans text-sm text-zinc-400">
					{mapsData.editorial_summary && <p class="mb-2">{mapsData.editorial_summary.overview}</p>}
					<p class="mb-2">{getClosedStatus(mapsData)}</p>
					<p>
						{data.status == "done" ? "Déjà visité" : "Pas encore visité"}{
							data.review && renderReview()
						}.
					</p>
				</div>
			</header>
			<main>
				<Content />
			</main>
			{
				articles.length > 0 && (
					<>
						<h2>Sur mon blog</h2>
						<div class="not-prose -mx-8 mt-8 flex flex-col">
							{articles.map((article) => {
								const palette = getPalette(article.data.palette)
								return (
									<a
										class="flex bg-[--bg] px-8 py-2 text-sm text-[--text] transition-all hover:brightness-110 hover:contrast-75 dark:bg-[--dark-bg] dark:text-[--dark-text]"
										style={{
											"--bg": getColor(palette.bgColor),
											"--dark-bg": getColor(palette.bgColor, "dark"),
											"--text": getColor(palette.baseColor),
											"--dark-text": getColor(palette.baseColor, "dark"),
										}}
										href={`/${article.id}`}
									>
										<div class="font-medium">{article.data.title}</div>
										<div class="grow" />
										<div>
											<ArticleDate date={article.data.date} yearOnly />
										</div>
									</a>
								)
							})}
						</div>
					</>
				)
			}
			{
				diaryEntries.length > 0 && (
					<>
						<h2>Dans mon journal</h2>
						<div class="not-prose -mx-8 mt-8 flex flex-col">
							{diaryEntries.map((entry) => {
								return (
									<a
										class="place flex bg-zinc-100 px-8 py-2 text-sm text-zinc-700 transition-colors hover:bg-zinc-200"
										href={`/diary/${entry.id}`}
									>
										<div class="font-medium">
											{entry.data.title}
											{entry.category == "trips" && (
												<FootstepsIcon
													size="0.9em"
													class="mb-[0.15em] ml-1 inline-block text-zinc-500"
												/>
											)}
										</div>
										<div class="grow" />
										{entry.data.date && (
											<div>
												<ArticleDate date={entry.data.date} yearOnly />
											</div>
										)}
									</a>
								)
							})}
						</div>
					</>
				)
			}
			{gallery && <h2>Photos de Google Maps</h2>}
		</div>
		{
			gallery && (
				<div class="grid grid-cols-2">
					{gallery.map((ref) => (
						<img
							class="h-56 w-full object-cover"
							src={ref.small}
							data-zoomable
							data-zoom-src={ref.large}
						/>
					))}
				</div>
			)
		}
		<footer
			class="-mt-8 flex items-center justify-between gap-8 px-8 py-10 font-work-sans text-sm text-zinc-400"
		>
			<p class="min-w-fit">
				<a href="/places" class="hover:text-amber-700">← Lieux</a>
			</p>
			<p class="text-right">
				<a href={mapsData.url} target="_blank" class="hover:text-amber-700"
					>{mapsData.name} sur Google Maps</a
				>
			</p>
		</footer>
	</div>
</DiaryLayout>

<style is:global>
	.prose .bg-mention {
		@apply bg-zinc-200 hover:bg-zinc-300;
	}
	.prose .bg-mention img {
		@apply mb-[0.2em];
	}
</style>
