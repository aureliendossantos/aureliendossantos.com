---
import ArticleCardMinimal from "$components/blog/ArticleCardMinimal.astro"
import Explore from "$layouts/Explore.astro"
import { getEntryBySlug } from "astro:content"
import getBlogPosts from "$utils/getCollection"
import { getUniquePlacesAndOccurences } from "$utils/getUniqueValuesAndOccurences"

const articles = await getBlogPosts()
const rawPlaces = articles.map((article) => article.data.places)
const uniquePlaces = getUniquePlacesAndOccurences(rawPlaces)

const places = await Promise.all(
	Object.entries(uniquePlaces).map(async ([placeId, amount]) => {
		return {
			slug: placeId.split("/")[1],
			place: await getEntryBySlug("places", placeId),
			articlesAmount: amount,
			articles: articles.filter((article) => article.data.places.includes(placeId)),
		}
	})
)

Object.entries(places).forEach(([key, value]) => {
	const myArticleSlugs = value.articles.map((a) => a.id)
	const allPlacesSlugs = places.map((p) => p.articles.map((a) => a.id))
	if (
		allPlacesSlugs.filter((p) => JSON.stringify(p) == JSON.stringify(myArticleSlugs)).length > 1
	) {
		value.articlesAmount = 0
		value.articles = []
	}
})
---

<Explore title={"Lieux"} type="Blog" animation="places">
	<div class="mt-[42px]" slot="header">
		<p></p>
	</div>
	<main>
		{
			Object.entries(places).map(([key, value]) => {
				return (
					<>
						<h2
							class:list={[
								"mt-[42px] px-5 text-base leading-tight",
								{ "-mb-8": value.articlesAmount == 0, "mb-[14px]": value.articlesAmount != 0 },
							]}
						>
							<a
								href={`/blog/places/${value.slug}`}
								class="text-neutral-500 hover:text-neutral-400 active:text-neutral-500 dark:hover:text-neutral-600 dark:active:text-neutral-500"
							>
								{value.place?.data.title}
							</a>
						</h2>
						<main class="flex flex-col shadow">
							{value.articles.map((article) => (
								<ArticleCardMinimal article={article} noPlace />
							))}
						</main>
					</>
				)
			})
		}
	</main>
</Explore>
