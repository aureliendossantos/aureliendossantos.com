---
import EntryCardMinimal from "$components/blog/EntryCardMinimal.astro"
import Explore from "$layouts/Explore.astro"
import getEntryOrThrow from "$utils/content/getEntryOrThrow"
import { getContentEntries } from "$utils/getCollection"
import getUniqueValuesAndOccurences from "$utils/getUniqueValuesAndOccurences"

const content = await getContentEntries()
const rawPlaces = content.map((entry) =>
	"places" in entry.data ? entry.data.places.map((p) => p.id) : []
)
const uniquePlaces = getUniqueValuesAndOccurences(rawPlaces)

const places = await Promise.all(
	Object.entries(uniquePlaces).map(async ([placeSlug, amount]) => {
		return {
			slug: placeSlug,
			place: await getEntryOrThrow("places", placeSlug),
			articlesAmount: amount,
			articles: content.filter(
				(entry) => "places" in entry.data && entry.data.places.find((p) => p.id == placeSlug)
			),
		}
	})
)

Object.entries(places).forEach(([key, value]) => {
	const myArticleSlugs = value.articles.map((a) => a.id)
	const allPlacesSlugs = places.map((p) => p.articles.map((a) => a.id))
	if (
		allPlacesSlugs.filter((p) => JSON.stringify(p) == JSON.stringify(myArticleSlugs)).length > 1
	) {
		value.articles = []
	}
})
---

<Explore title={"Lieux"}>
	<main>
		{
			Object.entries(places).map(([key, value]) => {
				return (
					<>
						<h2
							class:list={[
								"mx-auto mt-[42px] max-w-[500px] px-5 text-base leading-tight",
								{
									"-mb-8 hidden": value.articles.length == 0,
									"mb-[14px]": value.articles.length > 0,
								},
							]}
							style={{ fontFamily: "Louize" }}
						>
							<a
								href={`/blog/places/${value.slug}`}
								class="text-black hover:text-neutral-500 dark:text-white dark:hover:text-neutral-500"
							>
								{value.place?.data.title}
							</a>
						</h2>
						<main class="flex flex-col">
							{value.articles.map((article) => (
								<EntryCardMinimal entry={article} noPlace />
							))}
						</main>
					</>
				)
			})
		}
	</main>
</Explore>
