---
import "$styles/base.css"
import IGDBImage from "$components/IGDBImage.astro"
import RenderBlocks from "$components/notion/RenderBlocks.astro"
import BaseLayout from "$layouts/BaseLayout.astro"
import enumerate from "$utils/enumerateStrings"
import type { IGDBData } from "$utils/getIGDBgame"
import type getGames from "$utils/notion/getGames"
import { emotes } from "$utils/notion/reviewEmotes"
import { getGamesData } from "$utils/remoteData"

export async function getStaticPaths() {
	const games = await getGamesData()
	return games
		.filter((game) => game.igdb)
		.map((game) => ({
			params: { slug: game.slug },
			props: { game },
		}))
}

interface Props {
	game: Awaited<ReturnType<typeof getGames>>[number]
}
const { game } = Astro.props

const multiplayerLabels = {
	Local: "🛋️ Local",
	"En ligne": "🛜 En ligne",
	Coop: "🤝 Coop",
	Versus: "🆚 Versus",
}

const igdb = game.igdb as IGDBData
---

<BaseLayout
	title={game.title}
	ogType="website"
	bg={{ light: "white", dark: "black" }}
	navBarProps={{ title: game.title, parent: { title: "Jeux", href: "/games" } }}
>
	<div
		class="m-auto flex min-h-screen max-w-[607px] justify-center gap-6 px-4 py-8 text-slate-700 small:flex-col dark:text-slate-300"
	>
		<aside class="order-1 flex max-w-[180px] flex-col gap-2 small:order-2 small:max-w-none">
			<IGDBImage
				image={igdb.cover}
				size="cover_big"
				zoomable
				class="rounded bg-slate-500 small:hidden"
			/>
			{
				igdb.screenshots &&
					igdb.screenshots.slice(0, 2).map((screenshot) => (
						<>
							<IGDBImage
								image={screenshot}
								size="cover_big"
								zoomable
								class="rounded bg-slate-500 small:hidden"
							/>
							<IGDBImage
								image={screenshot}
								size="screenshot_big"
								zoomable
								class="hidden rounded bg-slate-500 small:block"
							/>
						</>
					))
			}
		</aside>
		<main class="order-2 small:order-1">
			<div class="flex gap-4">
				<div class="hidden min-w-[70px] max-w-[70px] small:block">
					<IGDBImage image={igdb.cover} size="cover_big" zoomable class="rounded bg-slate-500" />
				</div>
				<header>
					<h1
						class="text-xl text-slate-900 dark:text-slate-100"
						ondblclick={`window.location='${game.notionUrl}'`}
					>
						{game.title}
					</h1>
					<p class="text-slate-500">
						{igdb.release_dates[0].y} • {igdb.developers}{
							igdb.publishers != igdb.developers && ` • Publié par ${igdb.publishers}`
						}
					</p>
					<div class="my-3 flex flex-wrap gap-1">
						{
							igdb.platforms.map((p: any) => (
								<div class="rounded-sm bg-slate-200 px-1 text-sm text-slate-500 dark:bg-slate-800">
									{p.abbreviation}
								</div>
							))
						}
					</div>
					{
						game.multiplayer.length > 0 && (
							<div class="my-3 flex gap-1">
								{game.multiplayer.map((string) => (
									<div class=" rounded-sm bg-slate-200 px-1 text-sm text-slate-500 dark:bg-slate-800">
										{multiplayerLabels[string]}
									</div>
								))}
							</div>
						)
					}
				</header>
			</div>
			<h2 class="mt-6 text-xl font-semibold text-slate-400 dark:text-slate-600">Mon historique</h2>
			{game.firstPlayedYear && <p>J'y ai joué pour la première fois en {game.firstPlayedYear}.</p>}
			{
				game.myPlatforms.length > 0 ? (
					<p>
						J'y ai joué sur {enumerate(game.myPlatforms)} ({game.progress?.toLowerCase()}).
					</p>
				) : (
					<p>{game.progress}.</p>
				)
			}
			{
				(game.quickReview || game.review) && (
					<h2 class="mt-6 text-xl font-semibold text-slate-400 dark:text-slate-600">
						Mes impressions
					</h2>
				)
			}
			{
				game.quickReview && (
					<p class="text-slate-500">
						{emotes[game.quickReview]}
						{game.quickReview}
					</p>
				)
			}
			{game.review && <p>{game.review}</p>}
			<div class="prose prose-sm prose-slate mt-3 dark:prose-invert">
				<RenderBlocks blocks={game.blocks} />
			</div>
		</main>
	</div>
</BaseLayout>
