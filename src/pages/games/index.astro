---
import OptionalLink from "$components/OptionalLink.astro"
import FilterButton from "$components/games/FilterButton.astro"
import BaseLayout from "$layouts/BaseLayout.astro"
import getGames from "$utils/notion/getGames"
import { emotes } from "$utils/notion/reviewEmotes"

const firstResultsOnly = import.meta.env.DEV
const { games, notionResponse } = await getGames(
	{
		and: [
			{ property: "Type", select: { equals: "Jeu" } },
			{
				or: [
					{ property: "Progression", status: { does_not_equal: "À faire" } },
					{ property: "Appréciation", select: { is_not_empty: true } },
				],
			},
		],
	},
	firstResultsOnly
)
games.sort((a, b) => a.title.localeCompare(b.title))
---

<BaseLayout title="Jeux" ogType="website" bg="white" bgDark="black" font="Work Sans">
	<header class="m-auto my-8 max-w-prose px-4">
		<h1 class="mb-3 text-xl text-slate-900 dark:text-slate-100">Jeux auxquels j'ai joué</h1>
		<div class="prose prose-slate dark:prose-invert small:prose-sm">
			<p>
				Cette page recense les jeux auxquels j'ai joué et ce que j'en ai pensé. Pour les jeux qui
				n'ont pas de fin, je note si j'y joue « souvent » ou « rarement ».
			</p>
			<p>
				📝 indique qu'un rapide avis écrit est disponible sur la page du jeu.<br />📖 indique que le
				texte est un peu plus long.
			</p>
		</div>
	</header>
	<main class="m-auto my-8 max-w-prose">
		<div class="mb-4 flex flex-wrap gap-2 px-4">
			<input
				class="dark:highlight-white/5 min-h-[30px] grow rounded-md px-2 text-sm caret-indigo-500 shadow-sm ring-1 ring-slate-900/10 focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-slate-800 dark:ring-0 dark:focus:bg-slate-900 dark:focus:ring-2 dark:focus:ring-indigo-500"
				type="text"
				id="search-bar"
				placeholder="Rechercher un jeu"
			/>
			<div class="flex gap-2 text-sm small:w-full small:text-xs">
				<FilterButton id="local" content="🛋️ Local" />
				<FilterButton id="online" content="🛜 En ligne" />
				<FilterButton id="coop" content="🤝 Coop" />
				<FilterButton id="versus" content="🆚 Versus" />
			</div>
		</div>
		<table class="mb-8 w-full small:text-sm" id="games-table">
			<thead>
				<tr class="border-b border-slate-300 text-left">
					<th colspan="2" class="py-3 pl-3">Jeu</th><th>Progression</th><th colspan="4"
						>Multijoueur</th
					>
				</tr>
			</thead>
			<tbody class="text-slate-900 dark:text-slate-200">
				{
					games.map((item) => (
						<tr class="even:bg-slate-50 dark:even:bg-slate-900">
							<td
								class:list={[
									"py-3 pl-4 max-w-[26ch]",
									{ "font-medium text-indigo-700 dark:text-indigo-400": item.slug },
								]}
							>
								<OptionalLink href={item.slug && `/games/${item.slug}`}>
									{item.title}
									{item.blocks.length > 0 ? " 📖" : item.review && " 📝"}
								</OptionalLink>
							</td>
							<td>{emotes[item.quickReview] ? emotes[item.quickReview] : item.quickReview}</td>
							<td class="text-slate-500">{item.progress != "À faire" && item.progress}</td>
							<td>{item.multiplayer.includes("Local") && "🛋️"}</td>
							<td>{item.multiplayer.includes("En ligne") && "🛜"}</td>
							<td>{item.multiplayer.includes("Coop") && "🤝"}</td>
							<td class="pr-4">{item.multiplayer.includes("Versus") && "🆚"}</td>
						</tr>
					))
				}
			</tbody>
		</table>
	</main>
	{/*import.meta.env.DEV && <pre>{JSON.stringify(notionResponse, null, 2)}</pre>*/}
</BaseLayout>

<script>
	const searchBar = document.getElementById("search-bar") as HTMLInputElement
	const table = document.getElementById("games-table") as HTMLTableElement
	const rows = table.getElementsByTagName("tr")
	const checkboxes = document.querySelectorAll<HTMLInputElement>("input[name=filters]")
	function runAllFilters() {
		const searchedText = searchBar.value.toUpperCase()
		// Loop through all table rows, and hide those who don't match the search query
		for (let i = 0; i < rows.length; i++) {
			// Here, index [0] corresponds to game names
			const td0 = rows[i].getElementsByTagName("td")[0]
			if (td0) {
				let cellText = td0.textContent || td0.innerText
				if (cellText.toUpperCase().indexOf(searchedText) > -1) {
					rows[i].style.display = ""
				} else {
					rows[i].style.display = "none"
				}
			}
			// index [3] to 6 corresponds to local multiplayer
			for (let j = 0; j <= 3; j++) {
				const td = rows[i].getElementsByTagName("td")[j + 3]
				if (td) {
					let cellText = td.textContent || td.innerText
					if (checkboxes[j].checked && cellText == "") {
						rows[i].style.display = "none"
					}
				}
			}
		}
	}
	searchBar?.addEventListener("keydown", () => {
		runAllFilters()
	})
	checkboxes.forEach(function (checkbox) {
		checkbox.addEventListener("change", function () {
			runAllFilters()
		})
	})
</script>

<style is:global>
	@tailwind base;
	@tailwind components;
	@tailwind utilities;
	td:not(:last-of-type) {
		@apply pr-2;
	}
</style>
