---
import "$styles/base.scss"
import IGDBImage from "$components/IGDBImage.astro"
import OptionalLink from "$components/OptionalLink.astro"
import FilterButton from "$components/games/FilterButton.astro"
import BaseLayout from "$layouts/BaseLayout.astro"
import { emotes } from "$utils/notion/reviewEmotes"
import { getGamesData } from "$utils/remoteData"

const games = await getGamesData()

const reviewsOrder = [
	"Coup de cœur",
	"Aimé",
	"Sympa un moment",
	"Pas pour moi",
	"Mitigé",
	"Whatever",
	"Décevant",
	"J'aime pas",
	"Mauvais",
	"J'aimais",
	null,
]

games.sort(
	(a, b) =>
		reviewsOrder.indexOf(a.quickReview) - reviewsOrder.indexOf(b.quickReview) ||
		a.title.localeCompare(b.title)
)
---

<BaseLayout title="Jeux" ogType="website" bg={{ light: "white", dark: "black" }}>
	<div class="m-auto my-10 flex max-w-prose flex-col gap-8 px-4">
		<header>
			<div class="prose prose-slate small:prose-sm dark:prose-invert">
				<p>
					Cette page recense les jeux auxquels j'ai joué et ce que j'en ai pensé. Pour les jeux qui
					n'ont pas de fin, je note si j'y joue « souvent » ou « rarement ».
				</p>
				<p>
					📝 indique qu'un rapide avis écrit est disponible sur la page du jeu.<br />📖 indique que
					le texte est un peu plus long.
				</p>
				<h3 class="font-work-sans">Coups de cœur récents</h3>
				<div class="not-prose grid grid-cols-6 gap-3 medium:grid-cols-5 small:grid-cols-4">
					{
						games
							.filter((game) => game.igdb && game.quickReview == "Coup de cœur")
							.sort((a, b) => b.igdb!.first_release_date - a.igdb!.first_release_date)
							.slice(0, 12)
							.map((game) => (
								<a
									href={`/games/${game.slug}`}
									class="group scale-100 transition ease-out hover:scale-[1.03] medium:[&:nth-child(n+11)]:hidden small:[&:nth-child(n+9)]:hidden"
								>
									<IGDBImage
										image={game.igdb!.cover}
										size="cover_small"
										retina
										class="rounded bg-slate-500 shadow-sm transition-shadow group-hover:shadow"
										alt={game.title}
									/>
								</a>
							))
					}
				</div>
				<h3
					class="font-work-sans"
					ondblclick=`window.location='https://www.notion.so/aureliendossantos/a6d5cb61551b43e4a0521b681e385729'`
				>
					Tous les jeux
				</h3>
			</div>
		</header>
		<main class="font-work-sans">
			<div class="mb-5 space-y-2">
				<div class="flex flex-wrap gap-2 px-4">
					<input
						class="dark:highlight-white/5 min-h-[26px] grow rounded-md px-2 text-sm caret-indigo-500 shadow-sm ring-1 ring-slate-900/10 focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-slate-800 dark:ring-0 dark:focus:bg-slate-900 dark:focus:ring-2 dark:focus:ring-indigo-500"
						type="text"
						id="search-bar"
						placeholder="Rechercher un jeu"
					/>
					<div class="text-sm small:text-xs">
						<FilterButton type="checkbox" name="filters" id="all" content="Multijoueur" />
					</div>
				</div>
				<div
					class="grid w-full grid-cols-4 items-stretch gap-2 px-4 text-sm small:text-xs"
					id="filters-div"
					style="display: none;"
				>
					<FilterButton type="checkbox" name="filters" id="local" content="🛋️ Local" />
					<FilterButton type="checkbox" name="filters" id="online" content="🛜 En ligne" />
					<FilterButton type="checkbox" name="filters" id="coop" content="🤝 Coop" />
					<FilterButton type="checkbox" name="filters" id="versus" content="🆚 Versus" />
				</div>
			</div>
			<table class="mb-8 w-full small:text-sm" id="games-table">
				<thead>
					<tr class="border-b border-slate-300 text-left dark:border-slate-700">
						<th colspan="2" class="py-3 pl-4 font-medium">Jeu</th>
						<th class="font-medium">Progression</th>
						<th colspan="4" class="font-medium">Multijoueur</th>
					</tr>
				</thead>
				<tbody class="text-slate-900 dark:text-slate-200">
					{
						games.map((item) => (
							<tr
								class="even:bg-slate-50 dark:even:bg-slate-900"
								style={{ display: item.progress == "À essayer" ? "none" : "" }}
							>
								<td
									class:list={[
										"max-w-[26ch] py-3 pl-4",
										{
											"text-indigo-700 dark:text-indigo-400": item.igdb,
										},
									]}
								>
									<OptionalLink href={item.igdb ? `/games/${item.slug}` : undefined}>
										{item.title}
										{item.blocks.length > 0 ? " 📖" : item.review && " 📝"}
									</OptionalLink>
								</td>
								<td>{emotes[item.quickReview] || item.quickReview}</td>
								<td class="text-slate-500">{item.progress}</td>
								<td>{item.multiplayer.includes("Local") && "🛋️"}</td>
								<td>{item.multiplayer.includes("En ligne") && "🛜"}</td>
								<td>{item.multiplayer.includes("Coop") && "🤝"}</td>
								<td class="pr-4">{item.multiplayer.includes("Versus") && "🆚"}</td>
							</tr>
						))
					}
				</tbody>
			</table>
		</main>
	</div>
</BaseLayout>

<script>
	const searchBar = document.getElementById("search-bar") as HTMLInputElement
	const table = document.getElementById("games-table") as HTMLTableElement
	const rows = table.getElementsByTagName("tr")
	const checkboxes = document.querySelectorAll<HTMLInputElement>("input[name=filters]")

	const getCellText = (td: HTMLTableCellElement) => td.textContent || td.innerText

	function yieldToMain() {
		return new Promise((resolve) => {
			setTimeout(resolve, 0)
		})
	}

	async function runAllFilters() {
		const searchedText = searchBar.value.toUpperCase()
		// Loop through all table rows, and hide those who don't match the search query
		for (let i = 0; i < rows.length; i++) {
			// Here, index [0] corresponds to game names
			const td = rows[i].getElementsByTagName("td")[0]
			if (!td) continue
			if (getCellText(td).toUpperCase().indexOf(searchedText) > -1) {
				rows[i].style.display = ""
			} else {
				rows[i].style.display = "none"
			}
			// checkbox 0 is "all multiplayer games"
			// index [3] to 6 corresponds to multiplayer rows
			if (checkboxes[0].checked) {
				const multiplayerTds = [3, 4, 5, 6].map((j) => rows[i].getElementsByTagName("td")[j])
				if (multiplayerTds.filter((td) => td && getCellText(td) == "").length == 4) {
					rows[i].style.display = "none"
				}
			}
			// checkboxes 1 to 4 are multiplayer types
			// index [3] to 6 corresponds to multiplayer rows
			for (let j = 1; j <= 4; j++) {
				if (checkboxes[j].checked) {
					const td = rows[i].getElementsByTagName("td")[j + 2]
					if (getCellText(td) == "") {
						rows[i].style.display = "none"
					}
				}
			}
			// Si aucun filtre, on recache les jeux "à essayer"
			if (searchBar.value == "" && Array.from(checkboxes).filter((c) => c.checked).length == 0) {
				const td = rows[i].getElementsByTagName("td")[2]
				if (getCellText(td) == "À essayer") {
					rows[i].style.display = "none"
				}
			}
			// yield to main every 20 entries
			if (i % 20 == 0) await yieldToMain()
		}
	}
	searchBar?.addEventListener("keyup", () => {
		runAllFilters()
	})
	checkboxes.forEach(function (checkbox) {
		checkbox.addEventListener("change", function () {
			runAllFilters()
		})
	})
	checkboxes[0].addEventListener("change", function () {
		const div = document.getElementById("filters-div") as HTMLDivElement
		if (div.style.display === "none") {
			div.style.display = ""
		} else {
			div.style.display = "none"
		}
	})
</script>

<style is:global>
	td:not(:last-of-type) {
		@apply pr-2;
	}
</style>
