---
import "$styles/base.css"
import BaseLayout from "$layouts/BaseLayout.astro"
import { getSearchEntries } from "$utils/search"

const entries = await getSearchEntries()
---

<BaseLayout title="Recherche" bg="#17182f" ogType="website">
	<div id="particles-js"></div>
	<div
		class="mb-8 mt-48 flex flex-col flex-wrap content-center items-start gap-6 font-space-grotesk text-[#9ca3af] small:mt-8"
	>
		<div class="max-w-[320px]">
			<input
				id="search"
				class="mb-6 w-[320px] border-y-2 border-space-500 bg-transparent px-3 py-2 focus:border-space-300 focus:text-space-300 focus:outline-none focus:placeholder:text-space-600"
				placeholder="Rechercher..."
				autofocus
				autocomplete="off"
				type="text"
			/>
			<ul id="output" class="flex flex-col gap-6 !px-3"></ul>
			<script>
				import { SearchCard } from "$components/navbar/SearchCard"

				/**
				 * Use a JS vanilla component because Astro component should only be use SSG (cause ViteJS)
				 * This SearchCard will be used to display search's results, see ->
				 * src/components/SearchCard.js
				 */
				customElements.define("search-card", SearchCard)
			</script>
			<script define:vars={{ entries }}>
				// get the HTML elements on which we will interact
				const input = document.getElementById("search")
				const output = document.getElementById("output")
				/**
				 * Function called at each search, returns the list of articles corresponding
				 * to the keywords provided in input.
				 * @param {string} input - What's the search input?
				 * @return {Array<blogEntry>} - Articles returned by the search
				 */
				const applyInput = (input) => {
					const searchKeywords = input.toLowerCase().split(" ")
					if (input.length < 3) {
						results = []
					} else if (searchKeywords.length > 0) {
						// Filter block entries based on their title, abstract & tags
						// should match every keywords provided by search input !
						results = entries.filter((entry) =>
							searchKeywords.every(
								(keyword) =>
									entry.title.toLowerCase().includes(keyword) ||
									entry.description?.toLowerCase().includes(keyword) ||
									entry.categories?.some((cat) => cat.toLowerCase().includes(keyword)) ||
									entry.tags?.some((tag) => tag.toLowerCase().includes(keyword))
							)
						)
					} else {
						results = []
					}
					results.forEach((result) => {
						// For every result, insert a SearchCard in the output
						output.insertAdjacentHTML(
							"beforeend",
							`<search-card title="${result.title}" slug="${result.slug}" ${
								result.date ? `date="${result.date}"` : ""
							} ${result.categories ? `tags="${result.categories.join(", ")}"` : ""}></search-card>`
						)
					})
				}
				// On the first page load, initialize the output with an empty search.
				applyInput("")
				// add an event listener on input, to call applyInput/2 at each search
				input.addEventListener("input", (event) => {
					output.innerHTML = ""
					if (event.target) {
						const element = event.currentTarget
						applyInput(element.value)
					}
				})
			</script>
		</div>
	</div>
	<script src="/home/particlesjs2.0.0.min.js" is:inline></script>
	<script>
		document.addEventListener("astro:page-load", () => {
			// @ts-ignore
			particlesJS.load("particles-js", "/home/starryBackground.json", function () {
				console.log("callback - particles-js config loaded")
			})
		})
	</script>
</BaseLayout>

<style is:global>
	canvas {
		display: block;
	}

	#particles-js canvas {
		display: block;
		animation: fadein 2s;
	}

	@keyframes fadein {
		from {
			opacity: 0;
		}
		to {
			opacity: 1;
		}
	}

	#particles-js {
		width: 100%;
		height: 100%;
		position: fixed;
		z-index: -10;
		top: 0;
		left: 0;
	}

	ul {
		line-height: 1.35;
	}

	.result {
		.info {
			@apply text-space-600;
		}
		&:hover {
			@apply text-space-200;
			.info {
				@apply text-space-300;
			}
		}
	}
</style>
