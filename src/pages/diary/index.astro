---
import ArticleDate from "$components/articles/ArticleDate.astro"
import DiaryLayout from "$layouts/DiaryLayout.astro"
import { getDiary } from "$utils/getCollection"
import { getImage } from "astro:assets"
import { Icon } from "astro-icon/components"

const entries = await getDiary()
// Get a list of unique years in diary entries
const years = Array.from(new Set(entries.map((entry) => entry.year))).sort((a, b) => b - a)

const placesImage = await getImage({
	src: (await import("./images/places.jpg")).default,
	width: 800,
	alt: "Rue de Lisbonne",
})

const filters = [
	{ label: "Listes", category: "lists", default: true },
	{ label: "Escapades", category: "trips", default: true },
	{ label: "Vie intime", category: "personal", default: false },
]
---

<DiaryLayout ogType="website" title="Journal">
	<main class="flex flex-col pb-8 text-zinc-900">
		<header class="prose prose-zinc mb-8 mt-16 px-8 small:prose-sm">
			<h1>Journal</h1>
		</header>
		<a
			href="/places"
			class="relative h-64 w-full bg-amber-700 bg-cover transition hover:brightness-125 hover:contrast-75"
			style={{ backgroundImage: `url('${placesImage.src}')` }}
		>
			<p class="absolute bottom-8 left-8 text-xl font-medium text-zinc-50">Lieux â†’</p>
		</a>
		{
			years.map((year) => (
				<>
					<h2 class="mb-2 mt-8 border-b border-zinc-300 px-8 pb-4 font-work-sans text-sm font-semibold">
						{year}
					</h2>
					<div class="flex flex-col">
						{entries
							.filter((entry) => entry.year == year)
							.map((entry) => {
								return (
									<a
										class="diary-entry flex px-8 py-2 text-sm text-zinc-700 transition-colors hover:bg-zinc-100"
										href={`/diary/${entry.finalSlug}`}
										data-category={entry.category}
									>
										<div class="font-medium">
											{entry.data.draft && "[Draft] "}
											{entry.data.title}
											{entry.category == "trips" && (
												<Icon
													name="ion:footsteps"
													class="mb-[0.15em] ml-1 inline-block h-[0.9em] text-zinc-500"
												/>
											)}
											{entry.category == "lists" && (
												<Icon
													name="tdesign:map-collection"
													class="mb-[0.11em] ml-1 inline-block h-[1.1em] text-zinc-500"
												/>
											)}
										</div>
										<div class="grow" />
										{entry.data.date && (
											<div>
												<ArticleDate noYear date={entry.data.date} />
											</div>
										)}
									</a>
								)
							})}
					</div>
				</>
			))
		}
		{/* Filters dropdown */}
		<div class="mt-6 flex justify-end px-6">
			<div class="relative inline-block text-left">
				<button
					type="button"
					class="group rounded-md bg-white px-2 py-2 text-zinc-700 transition hover:bg-zinc-100"
					id="filters-button"
					aria-expanded="true"
					aria-haspopup="true"
				>
					<Icon
						name="ion:eye"
						class="h-5 w-5 text-zinc-300 transition group-hover:text-zinc-500"
						aria-hidden="true"
					/>
				</button>
				<div
					class="invisible absolute bottom-10 right-0 mt-2 w-36 rounded-md bg-zinc-950 font-work-sans text-zinc-300 shadow-lg"
					id="filters-dropdown"
					role="menu"
					aria-orientation="vertical"
					aria-labelledby="options-menu"
				>
					<div class="py-1" role="none">
						{
							filters.map((filter) => (
								<label class="block px-4 py-2 text-right text-sm hover:bg-zinc-800" role="menuitem">
									{filter.label}
									<input
										type="checkbox"
										id={filter.category}
										checked={filter.default}
										class="diary-filter ml-2"
									/>
								</label>
							))
						}
					</div>
				</div>
			</div>
		</div>
	</main>
</DiaryLayout>

<script>
	function runFilters() {
		const entries = document.querySelectorAll(".diary-entry") as NodeListOf<HTMLLinkElement>
		const checkboxes = document.querySelectorAll(
			"input[type=checkbox].diary-filter"
		) as NodeListOf<HTMLInputElement>
		checkboxes.forEach((checkbox) => {
			entries.forEach((entry) => {
				if (entry.dataset.category === checkbox.id) {
					entry.style.display = checkbox.checked ? "flex" : "none"
				}
			})
		})
		// Hide the year headers if there are no visible entries in that year
		const years = document.querySelectorAll("h2") as NodeListOf<HTMLHeadingElement>
		years.forEach((year) => {
			const entriesInYear = Array.from(year.nextElementSibling.children).filter(
				(entry) => entry.style.display !== "none"
			)
			year.style.display = entriesInYear.length ? "block" : "none"
		})
	}

	function initFiltering() {
		window.diaryFilters ??= {
			lists: true,
			trips: true,
			personal: false,
		}
		// Open the dropdown menu on click
		const button = document.getElementById(`filters-button`) as HTMLButtonElement | null
		if (!button) return
		const dropdown = document.getElementById(`filters-dropdown`) as HTMLDivElement
		button.addEventListener("click", () => {
			dropdown.classList.toggle("invisible")
		})
		// Close the dropdown menu if the user clicks outside of it
		window.addEventListener("click", (event) => {
			if (!button.contains(event.target) && !dropdown.contains(event.target)) {
				dropdown.classList.add("invisible")
			}
		})
		// Filter when the user clicks on a checkbox
		const checkboxes = document.querySelectorAll(
			"input[type=checkbox].diary-filter"
		) as NodeListOf<HTMLInputElement>
		checkboxes.forEach((checkbox) => {
			checkbox.checked = window.diaryFilters[checkbox.id]
			checkbox.addEventListener("change", () => {
				window.diaryFilters[checkbox.id] = checkbox.checked
				runFilters()
			})
		})
		// Filter once
		runFilters()
	}

	document.addEventListener("astro:after-swap", () => {
		initFiltering()
	})

	initFiltering()
</script>
