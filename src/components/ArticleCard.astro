---
import type { CollectionEntry } from "astro:content"
import { getImage } from "astro:assets"
import getPalette from "$utils/palettes"
import ArticleDate from "./ArticleDate.astro"
import getPlace from "$utils/places"
import ArticlePlace from "./ArticlePlace.astro"

interface Props {
	article: CollectionEntry<"blog">
	entryIndex: number
}
const { article, entryIndex } = Astro.props
const data = article.data
const palette = getPalette(data.palette)
const categories = data.categories.filter((name) => name != "Article" && name != "Micro-blog")
// const tags = data.tags.filter((name) => name == "Projet perso")
const labels = categories // [...categories, ...tags]
const place = data.places.length > 0 ? getPlace(data.places[0]) : undefined
const image = data.image && (await getImage({ src: data.image, width: 900 }))
const mini = (data.categories.includes("Micro-blog") || data.categories.includes("Notes")) && !image
---

<!-- <a> color style is used for box-shadow color in dark mode -->
<a
	class="grid w-full grid-cols-3 items-center xl:flex xl:grid-cols-none xl:flex-col"
	style={{ backgroundColor: palette.backgroundColor, color: palette.backgroundColor }}
	href={"/blog/" + article.slug}
>
	<div class:list={["h-full w-full", { "small:px-4 small:pt-4": image }]}>
		<div
			class:list={["h-full w-full", { "xl:h-44 xl:max-w-md xl:m-auto": image }]}
			style={{
				backgroundImage: image ? `url('${image.src}')` : "unset",
				backgroundSize: "cover",
				backgroundPosition: data.imageAnchorTop ? "top" : "center",
			}}
		>
		</div>
	</div>
	<div class="flex justify-center">
		<div
			class:list={[
				"ml-8 mr-16 flex min-w-[20rem] max-w-xs flex-col 2xl:ml-7 2xl:mr-14 2xl:min-w-[17.5rem] 2xl:max-w-[17.5rem] small:min-w-[20rem] small:max-w-xs small:mx-0",
				{ "my-16 3xl:my-12": !mini, "my-12 3xl:mb-6 3xl:mt-8": mini, "xl:mt-11": image },
			]}
			style={{ color: palette.mainColor }}
		>
			<div class="order-2">
				<h2
					class="mb-2 text-2xl font-bold 2xl:text-xl small:text-2xl"
					style={{ color: palette.mainColor, fontFamily: palette.headingsFont }}
				>
					{data.title}{data.draft && " [Draft]"}
				</h2>
				{
					data.description && (
						<p
							class="hidden text-sm xl:block small:text-base"
							style={{ color: palette.mainColor, fontFamily: palette.mainFont }}
						>
							{data.description} →
						</p>
					)
				}
			</div>
			<div
				class:list={[
					"font-sofia-sans uppercase text-sm opacity-75 2xl:text-xs small:text-sm",
					{
						"order-3 mt-2": image,
						"xl:mt-4": image && data.description,
						"order-1 mb-4": !image,
					},
				]}
				style={{ color: palette.secondaryColor }}
			>
				Entry #{entryIndex} /
				<ArticleDate date={data.date} />
				{labels.length > 0 && <>/ {labels.join(", ")}</>}
				{place && <ArticlePlace place={place} />}
			</div>
		</div>
	</div>
	{
		data.description && (
			<div class="flex justify-center xl:hidden">
				<p
					class="my-12 ml-8 mr-16 min-w-[20rem] max-w-xs 2xl:min-w-[17.5rem] 2xl:max-w-[17.5rem] 2xl:text-sm"
					style={{ color: palette.mainColor, fontFamily: palette.mainFont }}
				>
					{data.description} →
				</p>
			</div>
		)
	}
</a>
