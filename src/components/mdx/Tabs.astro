---
/* Code improved from https://code.juliancataldo.com/component/astro-tabs/ */
import crypto from "node:crypto"
import styles from "./Tabs.module.css"
import { type HTMLAttributes } from "astro/types"

type Props = HTMLAttributes<"div">

const props = Astro.props

const tabs: string[] = []
const panels: string[] = []

let inlineStyles = ""

{
	let index = 0
	const classes: string[] = []
	Object.entries(Astro.slots).forEach(([name]) => {
		if (name.startsWith("tab")) {
			index += 1
			tabs.push(name)
			classes.push(
				String(
					`.${styles.tabs}:has(.${styles.radio}-${index}:checked) ` + `.${styles.panel}-${index}`
				)
			)
		} else {
			panels.push(name)
		}
	})
	inlineStyles += classes.join(",\n")
}
inlineStyles +=
	` {` +
	//
	`\n  visibility: visible;\n` +
	`  display: inline-block;\n` +
	`}`

const uid = crypto.randomUUID()
---

<div {...props} class:list={[styles.tabs, "tabs", props["class:list"], props.class]}>
	<style set:html={inlineStyles}></style>

	<nav class:list={[styles["tab-bar"]]}>
		{
			tabs.map(async (name, idx) => {
				const index = idx + 1
				if (name.startsWith("tab")) {
					const render = await Astro.slots.render(name)
					return (
						<div class:list={["tab-wrapper", `tab-${index}`]}>
							<input
								class:list={[styles.radio, `${styles.radio}-${index}`, "tab-selector"]}
								type="radio"
								name={uid}
								checked={index === 1}
								id={`${uid}-${index}`}
							/>
							<label class:list={["tab", styles.tab]} for={`${uid}-${index}`}>
								<Fragment set:html={render} />
							</label>
						</div>
					)
				}
				return null
			})
		}
	</nav>

	<div class:list={[styles.panels]}>
		<div class="unsupported-message">
			<em
				>Désolé, votre navigateur ne peut pas afficher ces onglets. Merci d'essayer avec un autre
				navigateur.</em
			>
		</div>
		{
			panels.map(async (name, index) => (
				<div
					class:list={[
						styles.panel,
						`${name.endsWith("tallest") && styles.tallest}`,
						`${styles.panel}-${index}`,
						"panel",
					]}
					set:html={await Astro.slots.render(name)}
				/>
			))
		}
	</div>
</div>

<style>
	@supports selector(:has(a)) {
		.unsupported-message {
			display: none;
		}
	}
</style>
