---
import RefBlock from "$components/RefBlock.astro"
import { getCacheOrFetch } from "$utils/cache"
import formatDate from "$utils/formatting/formatDate"
import { TMDB_READ_ACCESS_TOKEN } from "astro:env/server"

interface Props {
	id: string
	posterOnly?: boolean
	popupId?: string
}
const { id, posterOnly, popupId } = Astro.props

const person = await getCacheOrFetch(
	id,
	"tmdb-person",
	async () => {
		const options = {
			method: "GET",
			headers: {
				accept: "application/json",
				Authorization: `Bearer ${TMDB_READ_ACCESS_TOKEN}`,
			},
		}
		const person = await fetch(`https://api.themoviedb.org/3/person/${id}?language=fr-Fr`, options)
			.then((response) => response.json())
			.catch((err) => console.error(err))
		if (person.success == false) throw new Error(`TMDB API Error: ${JSON.stringify(person)}`)
		return person
	},
	1
)

// Response format: https://developer.themoviedb.org/reference/movie-details
const year =
	formatDate(new Date(person.birthday), true) + person.deathday
		? " - " + formatDate(new Date(person.deathday), true)
		: ""
const infos = [person.biography]
const links = []
links.push(["<abbr>TMDB</abbr>", `https://www.themoviedb.org/person/${id}?language=fr-FR`])
---

<RefBlock
	img={person.profile_path ? `https://image.tmdb.org/t/p/w342${person.profile_path}` : undefined}
	imgHiRes={person.profile_path
		? `https://image.tmdb.org/t/p/original${person.profile_path}`
		: undefined}
	title={person.name}
	{infos}
	{links}
	imgOnly={posterOnly}
	{popupId}
	posterRatio={popupId ? "movie" : undefined}
	big
/>
