---
import RefBlock from "$components/RefBlock.astro"
import { getClosedStatus } from "$utils/remoteData/googleMaps"

interface Props {
	id: string
	big?: boolean
	gallery?: boolean
}
const { id, big, gallery } = Astro.props

const response = await fetch(
	`https://maps.googleapis.com/maps/api/place/details/json?place_id=${id}&language=fr&key=${
		import.meta.env.GOOGLE_MAPS_TOKEN
	}`
).then((response) => response.json())
// Response format: https://developers.google.com/maps/documentation/places/web-service/details
const { result: place } = response

const infos = []
if (place.vicinity != place.name) infos.push(place.vicinity)
if (place.editorial_summary) infos.push(place.editorial_summary.overview)
const closedStatus = getClosedStatus(place)
if (closedStatus) infos.push(closedStatus)
if (place.rating)
	infos.push(
		`${[...Array(Math.round(place.rating))].map(() => "⭐️").join(" ")} (${
			place.user_ratings_total
		} avis)`
	)
const links: [string, string][] = place.website
	? [
			[place.website, place.website],
			["Google Maps", place.url],
	  ]
	: [["Google Maps", place.url]]
const galleryUrls =
	gallery && place.photos.length >= 3
		? [1, 2, 3].map(
				(i) =>
					`https://maps.googleapis.com/maps/api/place/photo?maxwidth=200&photo_reference=${
						place.photos[i].photo_reference
					}&key=${import.meta.env.GOOGLE_MAPS_TOKEN}`
		  )
		: undefined
---

<RefBlock
	img={`https://maps.googleapis.com/maps/api/place/photo?maxwidth=${
		big ? 800 : 120
	}&photo_reference=${place.photos[0].photo_reference}&key=${import.meta.env.GOOGLE_MAPS_TOKEN}`}
	icon={place.icon}
	title={place.name}
	infos={infos}
	links={links}
	big={big}
	gallery={galleryUrls}
/>
 $utils/remoteData/places
