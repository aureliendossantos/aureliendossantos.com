---
import RefBlock from "$components/RefBlock.astro"
import formatDate from "$utils/formatting/formatDate"

interface Props {
	id: string
	posterOnly?: boolean
	popupId?: string
}
const { id, posterOnly, popupId } = Astro.props

console.log(`Getting TMDB data for ID ${id}...`)

const options = {
	method: "GET",
	headers: {
		accept: "application/json",
		Authorization: `Bearer ${import.meta.env.TMDB_READ_ACCESS_TOKEN}`,
	},
}
const movie = await fetch(
	`https://api.themoviedb.org/3/movie/${id}?language=fr-Fr&append_to_response=credits,images&include_image_language=null`,
	options
)
	.then((response) => response.json())
	.catch((err) => console.error(err))

if (movie.success == false) console.error(movie)
// Response format: https://developer.themoviedb.org/reference/movie-details
const year = formatDate(new Date(movie.release_date), true)
const infos = []
infos.push(
	`${movie.credits.crew
		.filter((c) => c.job === "Director")
		.map((c) => c.name)
		.join(", ")} (${year})`
)
infos.push(`Avec ${movie.credits.cast[0].name} et ${movie.credits.cast[1].name}`)
// infos.push(`${movie.production_companies.map((c) => c.name).join(", ")} (${year})`)
const links = []
links.push(["TMDB", `https://www.themoviedb.org/movie/${id}?language=fr-FR`])
---

<RefBlock
	img={movie.poster_path ? `https://image.tmdb.org/t/p/w342${movie.poster_path}` : undefined}
	imgHiRes={movie.poster_path
		? `https://image.tmdb.org/t/p/original${movie.poster_path}`
		: undefined}
	title={movie.title}
	infos={infos}
	links={links}
	imgOnly={posterOnly}
	popupId={popupId}
	posterRatio={popupId ? "movie" : undefined}
	big
	gallery={movie.images.backdrops
		.map((i) => `https://image.tmdb.org/t/p/w300${i.file_path}`)
		.slice(0, 3)}
	galleryHiRes={movie.images.backdrops
		.map((i) => `https://image.tmdb.org/t/p/original${i.file_path}`)
		.slice(0, 3)}
/>
