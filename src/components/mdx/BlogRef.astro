---
import RefBlock from "$components/RefBlock.astro"
import ArticleDate from "$components/ArticleDate.astro"
import { getEntryBySlug } from "astro:content"
import getPalette, { getColor } from "$utils/palettes"
import formatDate from "$utils/formatDate"

interface Props {
	slug: string
	titleOnly?: boolean
	card?: boolean
}
const { slug, titleOnly, card } = Astro.props

const article = await getEntryBySlug("blog", slug)
if (!article) return console.error(`BlogRef: article ${slug} can't be found`)
const palette = getPalette(article.data.palette)
---

{
	article &&
		(card ? (
			<RefBlock
				img={article.data.image?.src}
				title={article.data.title}
				infos={[formatDate(article.data.date), article.data.description || ""]}
				links={[["Blog", `/blog/${slug}`]]}
				big
			/>
		) : (
			<span
				class="my-[-1px] rounded border border-solid border-neutral-500 bg-[--background] px-[2px] text-[--main]"
				style={{
					"--background": getColor(palette.backgroundColor),
					"--main": getColor(palette.mainColor),
					"--secondary": getColor(palette.secondaryColor),
					fontFamily: palette.mainFont,
				}}
			>
				{!titleOnly && <span class="text-[--main]">Aurélien Dos Santos,</span>}
				<a
					href={"/blog/" + article.slug}
					style={{
						fontFamily: palette.headingsFont,
						textDecoration: "none",
						backgroundColor: "transparent !important",
					}}
				>
					{titleOnly ? article.data.title : `« ${article.data.title} »,`}
				</a>
				{!titleOnly && (
					<span class="text-[--main]">
						<ArticleDate date={article.data.date} />
					</span>
				)}
			</span>
		))
}
