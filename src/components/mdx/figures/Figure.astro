---
import Image from "$components/Image.astro"
import { borderClasses, paperClasses } from "$utils/design/images"
import type { ImageQuality } from "astro"

export interface Props {
	src: ImageMetadata | Promise<{ default: ImageMetadata }>
	alt?: string
	caption?: string
	rounded?: boolean
	shadow?: boolean
	effect?: "border" | "paper"
	resolution?: "third" | "half" | "normal" | "high"
	zoomQuality?: ImageQuality
}
const {
	src: srcToResolve,
	alt,
	caption,
	rounded,
	shadow,
	effect,
	resolution,
	zoomQuality,
	...attributes
} = Astro.props

if (typeof srcToResolve != "object") throw new Error("srcToResolve is not an object")
const src = "then" in srcToResolve ? (await srcToResolve).default : srcToResolve

const widthDivider = (() => {
	switch (resolution || "normal") {
		case "third":
			return 3
		case "half":
			return 2
		case "normal":
			return 1
		case "high":
			return 1
	}
})()

// TODO: Would be cool to get the page width from the layout, but I can't use CSS variables, so I don't know how I can get the value of --page-width
const contentWidth = 620
const screenWidth = 1920

const cssWidth = resolution == "high" ? screenWidth : contentWidth / widthDivider
---

<figure
	class="h-full"
	style={{
		// Resizing images in galleries. You could probably use other constants, but I got these from https://github.com/search?q=repo:CaiJimmy/hugo-theme-stack%20flex-basis&type=code and they work well.
		flexGrow: `${(src.width * 100) / src.height}`,
		flexBasis: `${(src.width * 240) / src.height}px`,
	}}
>
	<Image
		{src}
		widths={[cssWidth, cssWidth * 2, cssWidth * 3]}
		sizes={`(max-width: ${contentWidth}px) ${Math.round(100 / widthDivider)}vw, ${cssWidth}px`}
		{zoomQuality}
		alt={alt || ""}
		class:list={[
			effect == "border" && borderClasses,
			effect == "paper" && [borderClasses, paperClasses],
			{ "rounded-md": rounded, shadow: shadow },
		]}
		{...attributes}
	/>
	{
		Astro.slots.has("default") && (
			<figcaption>
				<div>
					<slot />
				</div>
			</figcaption>
		)
	}
	{
		caption && (
			<figcaption>
				<div>
					<slot>{caption}</slot>
				</div>
			</figcaption>
		)
	}
</figure>
