---
import type { HTMLAttributes } from "astro/types"

type singleSrc = string | Promise<{ default: string }>

/**
 * @param src One or multiple video sources. Good parameters a VP9 WebM with ffmepg are
 * ```sh
 * -vf "scale='min(1280,iw)':-2,fps=30" -c:v libvpx-vp9 -crf 35 -b:v 0 -g 240 -lag-in-frames 25 -static-thresh 500 -tile-columns 2 -threads 4 -an output.webm
 * ```
 * This scales the video to a maximum width of 1280 pixels and ensures a frame rate of 30 fps, in case of a 60fps gameplay.
 * For a video that's mostly static, you can play with the `-g` keyframe interval and the `-crf` quality (lower is better quality):
 * ```sh
 * -vf "scale='min(1280,iw)':-2,fps=30" -c:v libvpx-vp9 -crf 40 -b:v 0 -g 300 -lag-in-frames 25 -static-thresh 500 -tile-columns 2 -threads 4 -an output.webm
 * ```
 * @param gif Preset for `autoplay muted loop playsinline`
 * @param compat The most compatible video format should use the following ffmpeg parameters:
 * ```sh
 * -vcodec libx264 -profile:v main -level 3.1 -pix_fmt:v yuv420p -movflags faststart
 * ```
 * Thanks to `-level 3.1`, it can run on very old iPhones, even though it's less and less important by the day.
 */
interface Props extends Omit<HTMLAttributes<"video">, "src"> {
	src: singleSrc | { src: singleSrc; type?: string }[]
	compat?: singleSrc
	caption?: string
	gif?: boolean
	noFallbackText?: boolean
	figureClass?: HTMLAttributes<"figure">["class"]
}
const { src, compat, caption, gif, noFallbackText, figureClass, ...attributes } = Astro.props

const resolveSrc = async (src: singleSrc) => {
	if (typeof src === "string") return src
	return (await src).default
}

// Ensure src is an array
const sources = Array.isArray(src)
	? await Promise.all(
			src.map(async (item) => ({ src: await resolveSrc(item.src), type: item.type }))
		)
	: [{ src: await resolveSrc(src) }]

// Add the xxx-compat.mp4 fallback
if (compat) {
	sources.push({
		src: await resolveSrc(compat),
		type: "video/mp4",
	})
}
---

<figure class={figureClass}>
	<video
		width={attributes.width || "1920"}
		height={attributes.height || "1080"}
		autoplay={gif}
		muted={gif}
		loop={gif}
		onpointerdown="window.pCoord = [event.clientX, event.clientY];"
		onpointerup="if (window.pCoord[0] == event.clientX && window.pCoord[1] == event.clientY) this.paused ? this.play() : this.pause();"
		playsinline={gif}
		{...attributes}
	>
		{/* #t=0.1 is a workaround for videos sometimes not loading on iOS */}
		{
			sources.map((source) => (
				<source
					src={`${source.src}${gif ? "#t=0.1" : ""}`}
					type={"type" in source ? source.type : undefined}
				/>
			))
		}
		{
			!noFallbackText && (
				<p>
					Désolé, votre navigateur ne peut pas lire cette vidéo. Vous pouvez
					<a href="/about">me contacter</a>
					pour me signaler le problème ou
					<a href={sources[0].src}>télécharger la vidéo</a>.
				</p>
			)
		}
	</video>
	{
		Astro.slots.has("default") && (
			<figcaption>
				<slot />
			</figcaption>
		)
	}
	{
		caption && (
			<figcaption>
				<slot>
					<p>{caption}</p>
				</slot>
			</figcaption>
		)
	}
</figure>
