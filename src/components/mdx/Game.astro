---
import RefBlock from "$components/RefBlock.astro"
import { getConfiguredImageService } from "astro/dist/assets"

interface Props {
	slug: string
}
const { slug } = Astro.props
// TODO: handle errors
const authentication = await fetch(
	`https://id.twitch.tv/oauth2/token?client_id=${import.meta.env.TWITCH_ID}&client_secret=${
		import.meta.env.TWITCH_SECRET
	}&grant_type=client_credentials`,
	{
		method: "POST",
	}
).then((response) => response.json())
const token = authentication.access_token

function parameters(body: string): RequestInit {
	return {
		method: "POST",
		headers: {
			"Client-ID": import.meta.env.TWITCH_ID,
			Authorization: `Bearer ${token}`,
		},
		body: body,
	}
}

const request = await fetch(
	`https://api.igdb.com/v4/games`,
	parameters(
		`fields name, cover.image_id, platforms.abbreviation, first_release_date, release_dates.y, involved_companies.developer, involved_companies.publisher, involved_companies.company.name, websites.category, websites.url, url; where slug = "${slug}";`
	)
).then((response) => response.json())

const game = request[0]
const officialWebsites = game.websites.filter((w: any) => w.category == 1)
const links =
	officialWebsites.length > 0
		? [
				[officialWebsites[0].url, officialWebsites[0].url],
				["IGDB", game.url],
		  ]
		: ["IGDB", game.url]
---

<RefBlock
	img={`https://images.igdb.com/igdb/image/upload/t_cover_small_2x/${game.cover.image_id}.jpg`}
	title={`${game.name} (${game.release_dates[0].y})`}
	infos={[
		"Développé par " +
			game.involved_companies
				.filter((i: any) => i.developer)
				.map((i: any) => i.company.name)
				.join(", "),
		"Édité par " +
			game.involved_companies
				.filter((i: any) => i.publisher)
				.map((i: any) => i.company.name)
				.join(", "),
		"Disponible sur " + game.platforms.map((p: any) => p.abbreviation).join(", "),
	]}
	links={links}
/>
