---
import RefBlock from "$components/RefBlock.astro"

interface Props {
	id: string
}
const { id } = Astro.props

const response = await fetch(
	`https://maps.googleapis.com/maps/api/place/details/json?place_id=${id}&language=fr&key=${
		import.meta.env.GOOGLE_MAPS_TOKEN
	}`
).then((response) => response.json())
// Response format: https://developers.google.com/maps/documentation/places/web-service/details
const { result: place } = response

function dayOfWeekAsString(dayIndex: number): string {
	return ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"][dayIndex] || ""
}

function getClosedDays(openedDays: Array<number>): string {
	let daysNumbers = [0, 1, 2, 3, 4, 5, 6]
	let closedDays = daysNumbers
		.filter((dayNumber) => !openedDays.includes(dayNumber))
		.map((x) => dayOfWeekAsString(x))
	if (closedDays.length == 0) return "Ouvert tous les jours"
	return `Fermé le ${closedDays.join(", ")}.`
}

const infos = []
if (place.editorial_summary) infos.push(place.editorial_summary.overview)
if (place.business_status == "CLOSED_TEMPORARILY") infos.push("Fermé temporairement")
if (place.business_status == "CLOSED_PERMANENTLY") infos.push("Fermé définitivement")
infos.push(place.vicinity)
if (place.current_opening_hours)
	infos.push(getClosedDays(place.opening_hours.periods.map((period: any) => period.open.day)))
if (place.rating)
	infos.push(
		`${[...Array(Math.round(place.rating))].map(() => "⭐️").join(" ")} (${
			place.user_ratings_total
		} avis)`
	)
const links: [string, string][] = place.website
	? [
			[place.website, place.website],
			["Google Maps", place.url],
	  ]
	: [["Google Maps", place.url]]
---

<RefBlock
	img={`https://maps.googleapis.com/maps/api/place/photo?maxheight=320
    &photo_reference=${place.photos[0].photo_reference}&key=${import.meta.env.GOOGLE_MAPS_TOKEN}`}
	icon={place.icon}
	title={place.name}
	infos={infos}
	links={links}
/>
