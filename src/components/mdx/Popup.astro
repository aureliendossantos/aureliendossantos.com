---
import crypto from "node:crypto"
import Movie from "./Movie.astro"
import Game from "./Game.astro"
import MoviePerson from "./MoviePerson.astro"

interface Props {
	movie?: string
	moviePerson?: string
	game?: string
}
const { movie, moviePerson, game } = Astro.props

const uid = crypto.randomUUID()
---

<span id={`span-${uid}`} class="relative inline"
	><a
		id={`text-${uid}`}
		class="popup-link unstyled cursor-context-menu rounded-sm underline decoration-[--popup] decoration-1 underline-offset-3 dark:decoration-[--dark-popup]"
		><slot /></a
	></span
>

<template class="popup-template" id={uid}>
	<div
		class="popup absolute bottom-[25px] hidden h-[240px] rounded-md border-2 border-solid border-[--popup] bg-[--bg] indent-0 dark:border-[--dark-popup] dark:bg-[--dark-bg]"
		style={{ transform: "translateX(-50%)" }}
	>
		{movie && <Movie id={movie} popupId={uid} />}
		{moviePerson && <MoviePerson id={moviePerson} popupId={uid} />}
		{game && <Game slug={game} popupId={uid} />}
	</div>
</template>

<script>
	import { closePopupNavbar, openPopupNavbar } from "$utils/navbar"

	window.popupZindex = 10
	window.popupsOpened = 0
	document.addEventListener("astro:page-load", function () {
		const templates = document.querySelectorAll(
			`template.popup-template`
		) as NodeListOf<HTMLTemplateElement>
		templates.forEach((template) => {
			const uid = template.id

			const templateClone = (template.content.firstElementChild as HTMLDivElement).cloneNode(true)

			var span = document.getElementById(`span-${uid}`) as HTMLSpanElement
			var text = document.getElementById(`text-${uid}`) as HTMLLinkElement
			var popup = span.appendChild(templateClone) as HTMLDivElement

			var opened = false

			function closePopup() {
				if (!opened) return
				opened = false
				popup.style.display = "none"
				text.classList.remove(
					"bg-[--popup-active]",
					"dark:bg-[--dark-popup-active]",
					"cursor-pointer"
				)
				window.popupsOpened -= 1
				if (window.popupsOpened == 0) closePopupNavbar()
			}

			document.addEventListener("astro:before-preparation", () => {
				closePopup()
			})

			// Close the popup if the user clicks outside of it.
			// The first click is ignored (that's what the i is for)
			// because it's the click that opened the popup.
			// We also ignore clicks on the zoomed images.
			let clicks = 0
			const article = document.querySelector("main") as HTMLDivElement
			article.addEventListener("click", (event) => {
				if (opened) clicks += 1
				else clicks = 0
				if (clicks >= 2 && !window.mediumZoom.getZoomedImage() && !popup.contains(event.target)) {
					closePopup()
					clicks = 0
				}
			})

			text.addEventListener("click", function () {
				if (opened) {
					closePopup()
					return
				}
				// updating the navbar
				const data = (document.getElementById(`${uid}-data`) as HTMLDivElement).dataset
				openPopupNavbar(data.title as string, data.librarySlug, JSON.parse(data.links as string))
				// opening popup
				opened = true
				window.popupsOpened += 1
				var textRect = text.getBoundingClientRect()
				// here -4 is the borders width
				popup.style.width = Math.min(460, document.documentElement.clientWidth - 20 - 4) + "px"
				popup.style.left = textRect.width / 2 + "px"
				popup.style.display = "block"
				text.classList.add("bg-[--popup-active]", "dark:bg-[--dark-popup-active]", "cursor-pointer")

				window.popupZindex = Math.min(window.popupZindex + 1, 99)
				popup.style.zIndex = `${window.popupZindex}`

				// If the popup is too high on the page, we move it to the bottom
				popup.style.removeProperty("top")
				var popupRect = popup.getBoundingClientRect()
				if (popupRect.top < -window.scrollY) {
					popup.style.top = "20px"
				}
				// Bounds the x position on the screen
				if (popupRect.right > document.documentElement.clientWidth) {
					popup.style.left = "0px"
					popupRect = popup.getBoundingClientRect()
					popup.style.left = document.documentElement.clientWidth - popupRect.right - 10 + "px"
				} else if (popupRect.left < 0) {
					popup.style.left = "0px"
					popupRect = popup.getBoundingClientRect()
					popup.style.left = -popupRect.left + 10 + "px"
				}
				// Makes the little pictures zoomable
				window.mediumZoom.attach(document.querySelectorAll("[data-zoomable]"))
			})
		})
	})
</script>
