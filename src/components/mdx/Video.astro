---
import type { HTMLAttributes } from "astro/types"

type singleSrc = string | Promise<{ default: string }>

/**
 * @param {boolean} [gif] Preset for `autoplay muted loop playsinline`
 */
interface Props extends Omit<HTMLAttributes<"video">, "src"> {
	src: singleSrc | { src: singleSrc; type?: string }[]
	caption?: string
	gif?: boolean
}
const { src, caption, gif, ...attributes } = Astro.props

const resolveSrc = async (src: singleSrc) => {
	if (typeof src === "string") return src
	return (await src).default
}

// Ensure src is an array
const sources = Array.isArray(src)
	? await Promise.all(
			src.map(async (item) => ({ src: await resolveSrc(item.src), type: item.type }))
	  )
	: [{ src: await resolveSrc(src) }]
---

<figure>
	<video
		width="1920"
		height="1080"
		autoplay={gif}
		muted={gif}
		loop={gif}
		playsinline={gif}
		{...attributes}
	>
		{
			sources.map((source) => (
				<source src={source.src} type={"type" in source ? source.type : undefined} />
			))
		}
		<p>
			Désolé, votre navigateur ne peut pas lire cette vidéo. Vous pouvez
			<a href="/about">me contacter</a>
			 pour me signaler le problème ou
			<a href={sources[0].src}>télécharger la vidéo</a>.
		</p>
	</video>
	{
		Astro.slots.has("default") && (
			<figcaption>
				<slot />
			</figcaption>
		)
	}
	{
		caption && (
			<figcaption>
				<slot>
					<p>{caption}</p>
				</slot>
			</figcaption>
		)
	}
</figure>
