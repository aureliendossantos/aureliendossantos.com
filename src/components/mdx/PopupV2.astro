---
import MarkdownIt from "markdown-it"

interface Props {
	navBarTitle?: string
	navBarLinks?: { title: string; url: string }[]
	url?: string
	padding?: boolean
	noUnderline?: boolean
	diary?: boolean
	kitchen?: boolean
	icon?: "wikipedia" | "chef-hat"
}
const { navBarTitle, navBarLinks, url, padding, noUnderline, diary, kitchen, icon } = Astro.props

const uid = crypto.randomUUID()

const markdown = new MarkdownIt({ html: true })
const labelHtml = markdown
	.renderInline(await Astro.slots.render("default"))
	// Removing line returns in the slot render, as they can create unwanted spaces in the page
	.replace(/\n/g, "")
---

<span id={`span-${uid}`} class={`relative inline ${!kitchen && "not-prose"}`}
	><a
		id={`text-${uid}`}
		data-icon={icon}
		class={`popup-link unstyled cursor-context-menu rounded-sm ${
			noUnderline ? "!no-underline" : "underline"
		} ${
			kitchen
				? "decoration-dotted decoration-2 decoration-stone-400 underline-offset-4"
				: "decoration-[--popup] decoration-1 dark:decoration-[--dark-popup] underline-offset-3"
		}`}><Fragment set:html={labelHtml} /></a
	></span
><template class="new-popup-template" id={uid}>
	<div
		class={`popup absolute bottom-[25px] shadow-md hidden rounded border border-solid border-[--popup] bg-[--bg] indent-0 dark:border-[--dark-popup] dark:bg-[--dark-bg] prose-headings:text-inherit prose-headings:mt-0 prose-a:text-inherit`}
		style={diary
			? {
					"--popup": "#52525b",
					"--dark-popup": "#52525b",
					"--code-font": "Work Sans",
					color: "white",
					transform: "translateX(-50%)",
			  }
			: { transform: "translateX(-50%)" }}
	>
		{
			navBarTitle && navBarLinks && (
				<div
					id={`${uid}-data`}
					class="hidden"
					data-title={navBarTitle}
					data-links={JSON.stringify(navBarLinks)}
				/>
			)
		}
		<div class="flex flex-col">
			<div class=`overflow-auto max-h-[260px] medium:max-h-[230px] ${padding ? "p-8" : ""}`>
				<slot name="popup-contents" />
			</div>
			{
				url && (
					<div class="source truncate border-0 border-t border-dotted border-[--popup] px-8 py-2 font-[family-name:--code-font] text-xs dark:border-[--dark-popup]">
						{/* Repeating the border color rule is useful when tailwind base is active */}
						{/* TODO: No idea why but the following <a> is copied in the document (creating a space) even when `url` is undefined.
						I'll investigate when I need the <Wiki> component. */}
						{/*<a href={url} class="no-underline">
							{decodeURI(url)}
						</a>*/}
					</div>
				)
			}
		</div>
	</div>
</template>

<style>
	/* targets any a that has a data-icon attribute */
	a[data-icon]::after {
		content: "";
		mask-size: cover;
		mask-repeat: no-repeat;
		@apply relative inline-block;
	}
	a[data-icon="wikipedia"]::after {
		mask: url("/icons/wikipedia.svg") 50% 50%;
		background-color: #999;
		width: 2em;
		height: 1.6em;
		zoom: 30%;
		top: -0.9em;
		margin-right: -0.2em;
	}
	a[data-icon="chef-hat"]::after {
		mask: url("/icons/chef-hat.svg") 50% 50%;
		width: 2em;
		height: 2em;
		zoom: 40%;
		top: -0.8em;
		margin-right: -0.1em;
		@apply bg-stone-400;
	}
</style>

<style is:global>
	.popup {
		p {
			&:first-child {
				margin-top: 0;
			}
			&:last-child {
				margin-bottom: 0;
			}
		}
	}
</style>

<script>
	import { closePopupNavbar, openPopupNavbar } from "$utils/navbar"

	window.popupZindex = 10
	window.popupsOpened = 0
	document.addEventListener("astro:page-load", function () {
		const templates = document.querySelectorAll(
			`template.new-popup-template`
		) as NodeListOf<HTMLTemplateElement>
		templates.forEach((template) => {
			const uid = template.id
			const templateClone = (template.content.firstElementChild as HTMLDivElement).cloneNode(true)

			var span = document.getElementById(`span-${uid}`) as HTMLSpanElement
			var text = document.getElementById(`text-${uid}`) as HTMLLinkElement
			var popup = span.appendChild(templateClone) as HTMLDivElement

			var opened = false

			function closePopup() {
				if (!opened) return
				opened = false
				popup.style.display = "none"
				text.classList.remove(
					"bg-[--popup-active]",
					"dark:bg-[--dark-popup-active]",
					"cursor-pointer"
				)
				window.popupsOpened -= 1
				if (window.popupsOpened == 0) closePopupNavbar()
			}

			document.addEventListener("astro:before-preparation", () => {
				closePopup()
			})

			// Close the popup if the user clicks outside of it.
			// The first click is ignored (that's what the i is for)
			// because it's the click that opened the popup.
			// We also ignore clicks on the zoomed images.
			let clicks = 0
			const article = document.querySelector("main") as HTMLDivElement
			article.addEventListener("click", (event) => {
				if (opened) clicks += 1
				else clicks = 0
				if (
					clicks >= 2 &&
					!window.mediumZoom.getZoomedImage() &&
					event.target instanceof Node &&
					!popup.contains(event.target)
				) {
					closePopup()
					clicks = 0
				}
			})

			text.addEventListener("click", function () {
				if (opened) {
					closePopup()
					return
				}
				// updating the navbar
				const data = document.getElementById(`${uid}-data`)?.dataset
				if (data)
					openPopupNavbar(data.title as string, data.librarySlug, JSON.parse(data.links as string))
				// opening popup
				opened = true
				window.popupsOpened += 1
				var textRect = text.getBoundingClientRect()
				// Popup dimensions
				// here -2 is the borders width
				popup.style.width = Math.min(460, document.documentElement.clientWidth - 20 - 2) + "px"
				// the popup height should be at most 240px, or less if the contents is smaller
				popup.style.left = textRect.width / 2 + "px"
				popup.style.display = "block"
				text.classList.add("bg-[--popup-active]", "dark:bg-[--dark-popup-active]", "cursor-pointer")

				window.popupZindex = Math.min(window.popupZindex + 1, 99)
				popup.style.zIndex = `${window.popupZindex}`

				// If the popup is too high on the page, we move it to the bottom
				popup.style.removeProperty("top")
				var popupRect = popup.getBoundingClientRect()
				if (popupRect.top < -window.scrollY) {
					popup.style.top = "20px"
				}
				// Bounds the x position on the screen
				if (popupRect.right > document.documentElement.clientWidth) {
					popup.style.left = "0px"
					popupRect = popup.getBoundingClientRect()
					popup.style.left = document.documentElement.clientWidth - popupRect.right - 10 + "px"
				} else if (popupRect.left < 0) {
					popup.style.left = "0px"
					popupRect = popup.getBoundingClientRect()
					popup.style.left = -popupRect.left + 10 + "px"
				}
				// Makes the little pictures zoomable
				window.mediumZoom.attach(document.querySelectorAll("[data-zoomable]"))
			})
		})
	})
</script>
