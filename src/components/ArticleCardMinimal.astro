---
import type { CollectionEntry } from "astro:content"
import { getImage } from "astro:assets"
import getPalette from "$utils/palettes"
import ArticleDate from "./ArticleDate.astro"
import getPlace from "$utils/places"

interface Props {
	article: CollectionEntry<"blog"> | CollectionEntry<"tufte">
}
const { article } = Astro.props
const data = article.data
const palette = getPalette(article.data.palette)
const showCover = () => data.categories && data.categories.includes("Photos") && data.image
const optimizedBackground =
	showCover() && data.image ? await getImage({ src: data.image, width: 500 }) : null
const place = data.places.length > 0 ? getPlace(data.places[0]) : undefined
---

<a
	class="duration-80 scale-100 bg-cover bg-center ease-out first:rounded-t-lg last:rounded-b-lg hover:scale-[1.01] hover:rounded-[4px]"
	style={{
		color: palette.backgroundColor,
		backgroundColor: palette.backgroundColor,
		backgroundImage: showCover()
			? `linear-gradient(${palette.backgroundColor}99, ${palette.backgroundColor}49), url('${optimizedBackground?.src}')`
			: "none",
	}}
	href={"/post/" + article.slug}
>
	<div class="py-5 px-4" style={{ color: palette.mainColor, fontFamily: palette.mainFont }}>
		<span
			class="mb-2 text-lg font-bold"
			style={{ color: palette.mainColor, fontFamily: palette.headingsFont }}
		>
			{data.draft && "[Draft] "}{data.title}
		</span>
		<span
			style={{ color: palette.secondaryColor, textShadow: `0 0 1em ${palette.backgroundColor}` }}
		>
			<ArticleDate date={article.data.date} nonBreakingSpaces />{
				place && <span>Â / {place.customTitle}</span>
			}
		</span>
	</div>
</a>

<style lang="scss">
	a {
		box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
		transition: 0.25s;
	}
	@media (prefers-color-scheme: dark) {
		a {
			box-shadow: 0 0 40px -12px;
			transition: 0.3s;

			&:hover {
				box-shadow: 0 10px 80px -6px;
			}
		}
	}
</style>
