---
import { getEntryBySlug, type CollectionEntry } from "astro:content"
import { getImage } from "astro:assets"
import getPalette, { getColor } from "$utils/palettes"
import ArticleDate from "./ArticleDate.astro"

interface Props {
	article: CollectionEntry<"blog">
	noPlace?: boolean
}
const { article, noPlace } = Astro.props
const data = article.data
const palette = getPalette(article.data.palette)
const showCover = () => data.categories && data.categories.includes("Photos") && data.image
const optimizedBackground =
	showCover() && data.image ? await getImage({ src: data.image, width: 500 }) : null
const place =
	data.places.length > 0 ? (await getEntryBySlug("places", data.places[0]))?.data.title : undefined
// text-[--bg] is used to color the shadow
---

<a
	class="duration-80 scale-100 bg-[--bg] bg-cover bg-center text-[--bg] ease-out first:rounded-t-lg last:rounded-b-lg hover:scale-[1.01] hover:rounded-[4px]"
	style={{
		"--bg": getColor(palette.bgColor),
		"--text": getColor(palette.baseColor),
		"--secondary-text": getColor(palette.secondaryColor),
		backgroundImage: showCover()
			? `linear-gradient(${palette.bgColor}99, ${palette.bgColor}49), url('${optimizedBackground?.src}')`
			: "none",
	}}
	href={"/" + article.slug}
>
	<div class="px-4 py-5 text-[--text]" style={{ fontFamily: palette.baseFont }}>
		<span class="mb-2 text-lg font-bold" style={{ fontFamily: palette.headingsFont }}>
			{data.title}{data.draft && " [Draft]"}
		</span>
		<span
			class="text-[--secondary-text]"
			style={{
				textShadow: `0 0 1em ${palette.bgColor}`,
			}}
		>
			<ArticleDate date={article.data.date} nonBreakingSpaces />{
				place && !noPlace && <span>Â / {place}</span>
			}
		</span>
	</div>
</a>

<style>
	a {
		box-shadow:
			0 1px 3px 0 rgb(0 0 0 / 0.1),
			0 1px 2px -1px rgb(0 0 0 / 0.1);
		transition: 0.25s;
	}
	@media (prefers-color-scheme: dark) {
		a {
			box-shadow: 0 0 40px -12px;
			transition: 0.3s;

			&:hover {
				box-shadow: 0 10px 80px -6px;
			}
		}
	}
</style>
