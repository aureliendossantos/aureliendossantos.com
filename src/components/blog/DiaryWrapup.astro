---
import ArticleDate from "$components/articles/ArticleDate.astro"
import EntryIcon from "$components/diary/EntryIcon.astro"
import { getDiary } from "$utils/getCollection"
import { getImage } from "astro:assets"
import DiaryLink from "./DiaryLink.astro"

interface Props {
	year: number
}
const { year } = Astro.props

const diary = await Promise.all(
	(await getDiary())
		.filter((entry) => entry.data.highlight)
		.map(async (entry) => ({
			...entry,
			image: entry.data.image && (await getImage({ src: entry.data.image, width: 900 })),
		}))
)
const entries = diary.filter((entry) => entry.year == year)
---

<div
	class:list={[
		"relative grid w-full grid-cols-3 items-center bg-white font-sans text-zinc-900 xl:grid-cols-2 mediumlarge:flex mediumlarge:grid-cols-none mediumlarge:flex-col small:items-start",
		{ "small:h-80": entries.length < 6, "small:h-[460px]": entries.length >= 6 },
	]}
>
	<div
		class:list={[
			"relative h-full w-full mediumlarge:m-auto mediumlarge:h-44 mediumlarge:max-w-md small:absolute",
			{ "small:h-80": entries.length < 6, "small:h-[460px]": entries.length >= 6 },
		]}
	>
		{
			entries.map((entry, index) => {
				return (
					<div
						id={`${entry.id}-image`}
						data-year={year}
						class:list={[
							"absolute h-full w-full transition-opacity",
							{ "opacity-100": index == 0, "opacity-0": index > 0 },
						]}
						style={{
							zIndex: entries.length - index,
							backgroundImage: entry.image && `url(${entry.image.src})`,
							backgroundSize: "cover",
							backgroundPosition: entry.data.imageAnchorTop ? "top" : "center",
						}}
					/>
				)
			})
		}
	</div>
	<div class="flex justify-center small:absolute small:bottom-6">
		<div
			class:list={[
				"ml-8 mr-16 flex min-w-[20rem] max-w-xs flex-col 2xl:ml-7 2xl:mr-14 2xl:min-w-[17.5rem] 2xl:max-w-[17.5rem] xl:mt-11 small:mx-2 small:max-w-none",
			]}
			style={{ zIndex: entries.length + 1 }}
		>
			<div class="order-2">
				<h2
					class="mb-2 mt-8 text-2xl font-bold 2xl:text-xl xl:mt-0 small:mb-0 small:text-lg small:font-extrabold"
				>
					<span class="bg-white box-decoration-clone small:px-2 small:py-1"
						>{year} dans mon journal</span
					>
				</h2>
			</div>
			<div class="order-3 -mx-8 mb-8 flex flex-col small:mx-0 small:mb-0 small:items-start">
				{entries.map((entry, index) => <DiaryLink {entry} {year} hidden={index >= 3} />)}
			</div>
		</div>
	</div>
	<div class="flex justify-center self-end xl:hidden">
		<div
			class="my-8 ml-8 mr-16 min-w-[20rem] max-w-[20rem] 2xl:min-w-[17.5rem] 2xl:max-w-[17.5rem] 2xl:text-sm"
		>
			<div class="-mx-8 flex flex-col justify-end small:mx-0">
				{entries.slice(3).map((entry) => <DiaryLink {entry} {year} />)}
			</div>
		</div>
	</div>
</div>

<script>
	// Display the corresponding image cover on link hover.
	// Only toggles images of the current year.
	document.addEventListener("astro:page-load", () => {
		const images = Array.from(
			document.querySelectorAll("[id$='-image']") as NodeListOf<HTMLElement>
		)
		const links = document.querySelectorAll("[id$='-link']")
		links.forEach((link) => {
			link.addEventListener("mouseenter", () => {
				const year = link.getAttribute("data-year")
				images.forEach((image) => {
					if (image.getAttribute("data-year") == year) {
						const id = image.id.replace("-image", "")
						// Show if the image corresponds to the hovered link.
						image.classList.toggle("opacity-100", `${id}-link` == link.id)
						// Hide if the link is not the one hovered
						image.classList.toggle("opacity-0", `${id}-link` != link.id)
					}
				})
			})
		})
	})
</script>
