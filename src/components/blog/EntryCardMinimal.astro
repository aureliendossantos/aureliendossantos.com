---
import MarkdownIt from "markdown-it"
import { getEntries } from "astro:content"
import { getImage } from "astro:assets"
import getPalette, { getColor } from "$utils/design/palettes"
import ArticleDate from "../articles/ArticleDate.astro"
import type { getContentEntries } from "$utils/getCollection"

interface Props {
	entry: Awaited<ReturnType<typeof getContentEntries>>
	noPlace?: boolean
}
const { entry, noPlace } = Astro.props
const data = entry.data
const palette = getPalette(entry.data.palette)
const showCover = () => data.tags.find((tag) => tag.slug == "photos") && data.image
const optimizedBackground =
	showCover() && data.image ? await getImage({ src: data.image, width: 500 }) : null
const place =
	"places" in data && data.places.length > 0
		? (await getEntries(data.places))[0].data.title
		: undefined
const wiki = "editedTime" in entry
// text-[--bg] is used to color the shadow
const markdown = new MarkdownIt({ html: true })
const title = markdown.renderInline(data.title)
---

<a
	class="duration-80 border-[--secondary-color] bg-[--bg] ease-out hover:border-l-[16px]"
	style={{
		fontFamily: palette.baseFont,
		"--bg": wiki ? "#fbf7ee" : getColor(palette.bgColor),
		"--text": getColor(palette.baseColor),
		"--secondary-color": getColor(palette.secondaryColor),
	}}
	href={`/${entry.slug}`}
>
	<div
		class="mx-auto max-w-[calc(500px+2em)] bg-[--bg] bg-cover bg-center px-[calc(20px+1em)] py-[14px] text-[--text] small:px-5"
		style={{
			backgroundImage: showCover()
				? `linear-gradient(${palette.bgColor}99, ${palette.bgColor}49), url('${optimizedBackground?.src}')`
				: "none",
			boxShadow: "inset 2em 0 1em -1em var(--bg), inset -2em 0 1em -1em var(--bg)",
		}}
	>
		<span
			class="mb-2 text-lg font-bold leading-snug"
			style={{
				fontFamily: wiki ? "Bricolage Grotesque Variable" : palette.headingsFont,
			}}
		>
			<span set:html={title} />{data.draft && " [Draft]"}{data.status && ` ${data.status.icon}`}
		</span>
		<span
			class="font-sofia-sans text-xs uppercase text-[--secondary-color]"
			style={{
				textShadow: `0 0 1em ${palette.bgColor}`,
			}}
		>
			{
				// prettier-ignore
				"date" in entry.data && (
					<>
						<ArticleDate date={entry.data.date} nonBreakingSpaces />{place && !noPlace && <span>Â / {place}</span>}
					</>
				)
			}
		</span>
	</div>
</a>

<style>
	a {
		transition: 0.25s;
	}
</style>
