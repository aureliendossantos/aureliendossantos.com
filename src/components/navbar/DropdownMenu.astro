---
import type { AstroBuiltinAttributes } from "astro"

interface Props {
	id: string
	label?: string
	/** Align the dropdown to the right. */
	alignRight?: boolean
	initiallyHidden?: boolean
	borderLeft?: boolean
	borderRight?: boolean
	truncate?: "medium" | "mediumlarge" | "xl"
	chevron?: boolean
	keepOpenOnClick?: boolean
	classes?: AstroBuiltinAttributes["class:list"]
}
const {
	id,
	label,
	alignRight,
	initiallyHidden,
	borderLeft,
	borderRight,
	truncate,
	chevron,
	keepOpenOnClick,
	classes,
} = Astro.props
---

<div id={`${id}-parent`} class:list={["relative", { hidden: initiallyHidden }]}>
	<button
		id={`${id}-button`}
		aria-haspopup="true"
		style="padding-block: unset;"
		class:list={[
			"group m-0 flex h-full items-center justify-center gap-2 whitespace-nowrap border-neutral-700 p-0 px-3 hover:bg-white hover:text-black",
			{ "border-l": borderLeft, "border-r": borderRight, "medium:px-2": !label || truncate },
		]}
	>
		<slot name="icon" />
		<slot name="label" />
		{
			label && (
				<div
					id={`${id}-text`}
					class:list={{
						truncate: truncate,
						"mediumlarge:max-w-[20vw] medium:hidden": truncate == "medium",
						"mediumlarge:hidden": truncate == "mediumlarge",
						"xl:hidden": truncate == "xl",
					}}
				>
					{label}
				</div>
			)
		}
		{
			chevron && (
				<div class="absolute -right-[2px] top-3 z-[1000] h-[4px] w-[4px] rotate-45 border-r border-t border-neutral-700 bg-black group-hover:bg-white" />
			)
		}
	</button>
	<div
		id={`${id}-dropdown`}
		class:list={[
			"invisible absolute bottom-7 z-10 bg-black",
			classes,
			{ "left-0": !alignRight, "right-0": alignRight },
		]}
		role="menu"
		aria-orientation="vertical"
		aria-labelledby="menu-button"
		tabindex="-1"
	>
		<div id={`${id}-items-container`} role="none" class="divide-y divide-solid divide-neutral-700">
			<slot />
		</div>
	</div>
</div>

<script is:inline define:vars={{ id, keepOpenOnClick }}>
	// Prevent the script to be ran when the page changes
	if (!window[id]) {
		window[id] = true
		// Open the dropdown menu on click
		const button = document.getElementById(`${id}-button`)
		const dropdown = document.getElementById(`${id}-dropdown`)
		button.addEventListener("click", () => {
			dropdown.classList.toggle("invisible")
		})
		if (!keepOpenOnClick) {
			// Close the dropdown menu if the user clicks outside of it
			window.addEventListener("click", (event) => {
				if (!button.contains(event.target)) {
					dropdown.classList.add("invisible")
				}
			})
		}
	}
</script>
