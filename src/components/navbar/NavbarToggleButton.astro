---
import type { HTMLAttributes } from "astro/types"
import DoubleArrowUp from "$icons/material-symbols-light/keyboard-double-arrow-up-rounded.svg"
import DoubleArrowDown from "$icons/material-symbols-light/keyboard-double-arrow-down-rounded.svg"

interface Props extends HTMLAttributes<"div"> {
	bgClasses?: HTMLAttributes<"button">["class"]
	textAndBorderClasses?: HTMLAttributes<"div">["class"]
	arrowIcon?: "up" | "down"
	id?: string
}
const { bgClasses, textAndBorderClasses, id, arrowIcon } = Astro.props

const dir = arrowIcon || "down"
---

<button
	{id}
	aria-label="Toggle navigation bar"
	style="padding-block: unset;"
	class:list={[
		"navbar-toggle-button group m-0 flex h-full cursor-pointer items-center justify-center border-none p-0 px-3 medium:px-2",
		bgClasses,
	]}
>
	<div class:list={["rounded-sm border leading-tight", textAndBorderClasses]}>
		<div class="navbar-toggle-text px-[4px] medium:hidden">Ctrl+K</div>
		{
			dir == "down" ? (
				<DoubleArrowDown
					size="17px"
					class="navbar-toggle-icon inline-block hidden align-top medium:inline-block"
				/>
			) : (
				<DoubleArrowUp
					size="17px"
					class="navbar-toggle-icon inline-block hidden align-top medium:inline-block"
				/>
			)
		}
	</div>
</button>

<script>
	// Button contents. There might be multiple buttons on the page.
	import { isTouchScreen, isMac, toggleNavbar, toast } from "$utils/navbar"

	const buttons = document.querySelectorAll(
		".navbar-toggle-button"
	) as NodeListOf<HTMLButtonElement>
	const buttonIcons = document.querySelectorAll(".navbar-toggle-icon") as NodeListOf<HTMLDivElement>
	const buttonTexts = document.querySelectorAll(".navbar-toggle-text") as NodeListOf<HTMLDivElement>
	// isTouchScreen() might not detect all phones/tablets. That's why we also
	// use a CSS breakpoint. This is merely a polishing touch.
	if (isTouchScreen()) {
		buttonTexts.forEach((t) => t.classList.add("hidden"))
		buttonIcons.forEach((i) => i.classList.remove("hidden"))
	} else if (isMac()) {
		buttonTexts.forEach((t) => (t.innerText = "⌘K"))
	} else {
		buttonTexts.forEach((t) => (t.innerText = "Ctrl+K"))
	}
	buttons.forEach((button) => {
		button.onclick = () => {
			const isOpened = toggleNavbar()
			if (isOpened) return
			const message =
				isTouchScreen() || window.innerWidth < 600
					? "Réouvrez la barre de navigation en rechargant la page."
					: `Réouvrez la barre de navigation avec ${isMac() ? "⌘K" : "Ctrl+K"}.`
			toast(message, 3000, "right")
		}
	})
</script>
