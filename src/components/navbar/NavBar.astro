---
import "@fontsource/work-sans"
import { checkLocale, useTranslations } from "$utils/i18n"
import Toast from "./Toast.astro"
import DropdownItem from "$components/navbar/DropdownItem.astro"
import Spinner from "$styles/icons/loading.svg"
import DropdownMenu from "./DropdownMenu.astro"
import DownloadLink from "./DownloadLink.astro"
import ExternalLink from "./ExternalLink.astro"
import InactiveItem from "./InactiveItem.astro"
import type { NavBarProps } from "$utils/navbar"
import SearchBar from "./SearchBar.astro"
import NavbarGraph from "$components/navbar/NavbarGraph.astro"
import GlobalGraph from "$components/navbar/GlobalGraph.astro"
import GameStatus from "./GameStatus.astro"
import AudioController from "./AudioController.astro"
import SearchItemsContainer from "./SearchItemsContainer.astro"
import NetworkIcon from "$icons/carbon/network-1.svg"
import HomeIcon from "$icons/charm/home.svg"
import ShareNetworkIcon from "$icons/ph/share-network.svg"
import LibraryIcon from "$icons/lucide/square-library.svg"
import TocIcon from "$icons/ic/baseline-toc.svg"
import ShareIcon from "$icons/ic/baseline-ios-share.svg"
import CheckIcon from "$icons/ic/baseline-check.svg"
import CampfireIcon from "$icons/mdi/campfire.svg"
import CollapseIcon from "$icons/material-symbols/collapse-content-rounded.svg"
import DoubleArrowDownIcon from "$icons/material-symbols/keyboard-double-arrow-down-rounded.svg"

interface Props extends NavBarProps {
	viewportCover?: boolean
	audioController?: boolean
}

const { title, parent, related, headings, viewportCover, audioController } = Astro.props
const relatedTitle = Astro.props.relatedTitle || "Voir aussi"
const t = useTranslations(checkLocale(Astro.currentLocale))
---

</div>

{
	/* When it's easy to separate sub-elements in the DOM, put them here instead of nested in the navbar, to avoid issues with nested backdrop filters. */
}
<SearchItemsContainer />
<GlobalGraph />

<div
	id="navbar"
	class="navbar-colors navbar-bg fixed bottom-0 z-[999] flex h-7 w-full max-w-full border-t font-work-sans text-sm transition-all duration-500 print:!hidden"
	style={{
		marginLeft: "calc(var(--has-viewport-cover) * env(safe-area-inset-left))",
		paddingLeft: "env(safe-area-inset-left)",
		paddingRight: "env(safe-area-inset-right)",
	}}
>
	<div id="navbar-main-actions" class="flex">
		<DropdownMenu
			id="navbar-graph"
			label={t("n-explore")}
			borderRight
			truncate="medium"
			keepOpenOnClick
		>
			<NetworkIcon size="17px" slot="icon" />
			<NavbarGraph {title} />
		</DropdownMenu>
		<!--
		<DropdownMenu id="navbar-explore" label="Portails" truncate="medium" borderRight chevron>
			<NetworkIcon class="h-[17px]" slot="icon" />
			<div class="hidden border-x-0 px-3 py-[6px] leading-tight text-neutral-500 medium:block">
				Portails
			</div>
			<DropdownItem width={106} label="Accueil" href="/" />
			<DropdownItem label="Portfolio" href="/portfolio" />
			<DropdownItem label="Blog" href="/" />
			<DropdownItem label="Appareils" href="/gear" />
			<DropdownItem label="Cuisine" href="/kitchen" />
			<DropdownItem label="Journal" href="/diary" />
			<DropdownItem label="À propos" href="/website" />
		</DropdownMenu>
		-->
		<a
			id="navbar-parent-link"
			class:list={[
				"navbar-colors navbar-hover-colors group relative m-0 flex h-full items-center justify-center gap-2 border-r p-0 px-3",
				{
					hidden: !parent,
				},
			]}
			href={parent?.href}
		>
			<HomeIcon size="14px" />
			<div id="navbar-parent-text" class="truncate whitespace-nowrap small:max-w-[20vw]">
				{parent?.title}
			</div>
			<div
				class="navbar-colors absolute -right-[3px] top-3 z-[1000] h-[4px] w-[4px] rotate-45 border-r border-t bg-[--navbar-bg-compatible] group-hover:bg-[--navbar-hover-bg] dark:bg-[--dark-navbar-bg-compatible] dark:group-hover:bg-[--dark-navbar-hover-bg]"
			>
			</div>
		</a>
		<button
			id="navbar-copy-link"
			style="padding-block: unset;"
			class="navbar-colors navbar-hover-colors group relative m-0 flex h-full items-center justify-center gap-2 border-r p-0 px-3 medium:px-2"
		>
			<ShareIcon size="14px" id="navbar-link-icon" class="-mt-[3px]" />
			<CheckIcon size="17px" id="navbar-link-checkmark" class="hidden" />
			<div id="navbar-loading-icon" class="hidden h-[17px] w-[17px] animate-spin">
				<Spinner />
			</div>
			<div id="navbar-title" class="truncate mediumlarge:max-w-[20vw] medium:hidden">
				{title}
			</div>
		</button>
		<DropdownMenu
			id="navbar-toc"
			label="Table des matières"
			truncate="xl"
			borderRight
			initiallyHidden={!headings || headings.length <= 1}
		>
			<TocIcon id="navbar-link-icon" size="17px" class="rotate-180" slot="icon" />
			<div
				class="line-clamp-2 hidden w-[192px] border-x-0 px-3 py-[6px] leading-tight text-neutral-500 xl:block"
			>
				Table des matières
			</div>
			{
				headings
					?.filter((h) => h.depth == 2)
					.map((h, i) => (
						<DropdownItem label={`${i + 1}. ${h.text}`} href={`#${h.slug}`} width={192} />
					))
			}
		</DropdownMenu>
		<DropdownMenu
			id="navbar-related"
			label={relatedTitle}
			truncate="mediumlarge"
			borderRight
			initiallyHidden={!related || related.length == 0}
		>
			<ShareNetworkIcon size="16px" slot="icon" />
			<div
				id="navbar-related-mobile-title"
				class="line-clamp-2 hidden w-[192px] border-x-0 px-3 py-[6px] leading-tight text-neutral-500 mediumlarge:block"
			>
				{relatedTitle}
			</div>
			{
				[0, 1, 2].map((i) => (
					<DropdownItem
						label={(related && related[i]?.title) || "undefined"}
						href={(related && related[i]?.href) || "#"}
						initiallyHidden={!related || !related[i]}
						width={192}
					/>
				))
			}
		</DropdownMenu>
	</div>
	<div id="navbar-image-actions" class="flex hidden">
		<DownloadLink id="navbar-download-lowres-image" label="Basse qualité" shortLabel="SD" href="" />
		<DownloadLink id="navbar-download-hires-image" label="Haute qualité" shortLabel="HD" href="" />
		<DownloadLink
			id="navbar-download-original-image"
			label="Original (png)"
			shortLabel="Original"
			href=""
		/>
	</div>
	<div id="navbar-popup-actions" class="flex hidden">
		<InactiveItem id="navbar-popup-title" label="Titre" borderRight truncate />
		<a
			id="navbar-popup-library"
			class="navbar-colors navbar-hover-colors group relative m-0 flex h-full items-center justify-center gap-2 border-r p-0 px-3 medium:px-2"
			href=""
		>
			<div class="whitespace-nowrap medium:hidden">Dans ma bibliothèque</div>
			<LibraryIcon size="17px" />
		</a>
		{
			[1, 2, 3].map((i) => (
				<ExternalLink id={`navbar-popup-link-${i}`} label={`Lien ${i}`} href="" />
			))
		}
	</div>
	<div class="grow"></div>
	{audioController && <AudioController />}
	<SearchBar />
	{
		/*<NavbarToggleButton
		textAndBorderClasses="border-neutral-500 text-neutral-400 group-hover:border-white group-hover:text-white"
	/>*/
	}
	<button
		id="fullscreen-to-overview"
		class="navbar-colors navbar-hover-colors hidden border-r px-3 medium:px-2"
	>
		<CollapseIcon size="17px" />
	</button>
	<DropdownMenu id="navbar-game" keepOpenOnClick alignRight>
		<div slot="icon">
			<CampfireIcon id="navbar-game-main-icon" size="17px" />
			<DoubleArrowDownIcon id="navbar-game-close-icon" size="17px" class="hidden" />
		</div>
		<GameStatus />
	</DropdownMenu>
</div>

<Toast />

<div id="navbar-data" class="hidden" data-props={JSON.stringify(Astro.props)}></div>

<script>
	// Display download links when an image is opened with MediumZoom
	window.mediumZoom.on("open", (event: any) => {
		// Toggle visibility
		;(document.querySelector("#navbar-main-actions") as HTMLDivElement).classList.add("hidden")
		;(document.querySelector("#navbar-popup-actions") as HTMLDivElement).classList.add("hidden")
		;(document.querySelector("#navbar-image-actions") as HTMLDivElement).classList.remove("hidden")
		// Get divs
		const img = event.detail.zoom.getZoomedImage() as HTMLImageElement
		const data = img.dataset
		const local = data.width
		const lowResLink = document.querySelector("#navbar-download-lowres-image") as HTMLLinkElement
		const hiResLink = document.querySelector("#navbar-download-hires-image") as HTMLLinkElement
		const originalLink = document.querySelector(
			"#navbar-download-original-image"
		) as HTMLLinkElement
		// img.src link. When local, it's the low res image (display the resolution).
		// When remote, it can either be the only available image or the low res one.
		lowResLink.href = img.src
		;(document.querySelector("#navbar-download-lowres-image-text") as HTMLDivElement).innerText =
			local
				? `${data.width}${data.height ? `×${data.height}` : "w"} (webp)`
				: data.zoomSrc
					? "Basse qualité"
					: "Télécharger"
		// Original link for local images
		if (data.originalSrc) {
			;(
				document.querySelector("#navbar-download-original-image-text") as HTMLDivElement
			).innerText =
				`${data.originalWidth}${data.originalHeight ? `×${data.originalHeight}` : "w"} (${data.originalFormat} original)`
			originalLink.href = data.originalSrc as string
			originalLink.classList.remove("hidden")
		} else {
			originalLink.classList.add("hidden")
		}
		// Hi res link for local or remote images. In the case of remote images, it's the best option available.
		if (data.zoomSrc) {
			;(document.querySelector("#navbar-download-hires-image-text") as HTMLDivElement).innerText =
				local
					? `${data.zoomWidth}${data.zoomHeight ? `×${data.zoomHeight}` : "w"} (webp)`
					: "Original"
			hiResLink.href = data.zoomSrc
			hiResLink.classList.remove("hidden")
		} else {
			hiResLink.classList.add("hidden")
		}
	})
	// Hide download links when an image is closed with MediumZoom
	window.mediumZoom.on("close", () => {
		;(document.querySelector("#navbar-image-actions") as HTMLLinkElement).classList.add("hidden")
		if (window.popupsOpened > 0) {
			;(document.querySelector("#navbar-popup-actions") as HTMLLinkElement).classList.remove(
				"hidden"
			)
		} else {
			;(document.querySelector("#navbar-main-actions") as HTMLLinkElement).classList.remove(
				"hidden"
			)
		}
	})
</script>

<script>
	// Keyboard shortcut to toggle navbar
	import { toggleNavbar, isMac } from "$utils/navbar"

	const keyDownHandler = (event: KeyboardEvent) => {
		const mac = isMac()
		if (!mac && event.ctrlKey && event.key === "k") {
			toggleNavbar()
		}
		if (mac && event.metaKey && event.key === "k") {
			toggleNavbar()
		}
	}
	window.addEventListener("keydown", keyDownHandler)
</script>

<script>
	import { toast } from "$utils/navbar"

	// Copy link button (without anchors)
	const button = document.querySelector("#navbar-copy-link") as HTMLButtonElement
	button.addEventListener("click", () => {
		toast("Lien copié dans le presse-papiers.")
		navigator.clipboard.writeText(window.location.href.split("#")[0])
		const linkIcon = document.querySelector("#navbar-link-icon") as HTMLDivElement
		const checkmark = document.querySelector("#navbar-link-checkmark") as HTMLDivElement
		linkIcon.classList.add("hidden")
		checkmark.classList.remove("hidden")
		setTimeout(() => {
			checkmark.classList.add("hidden")
			if (!window.nextPageIsLoading) {
				linkIcon.classList.remove("hidden")
			}
		}, 1000)
	})
</script>

<style is:global>
	#navbar a:link {
		@apply no-underline;
	}
</style>
