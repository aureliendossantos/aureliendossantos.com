---
import Toast from "./Toast.astro"
import DropdownItem from "$components/navbar/DropdownItem.astro"
import spinner from "$styles/icons/loading.svg?raw"
import DropdownMenu from "./DropdownMenu.astro"
import DownloadLink from "./DownloadLink.astro"
import ExternalLink from "./ExternalLink.astro"
import InactiveItem from "./InactiveItem.astro"
import { Icon } from "astro-icon/components"
import NavbarToggleButton from "./NavbarToggleButton.astro"
import type { NavBarProps } from "$utils/navbar"
import SearchBar from "./SearchBar.astro"

interface Props extends NavBarProps {
	ssr?: boolean
}

const { title, parent, related, headings, ssr } = Astro.props
const relatedTitle = Astro.props.relatedTitle || "Voir aussi"
---

<Toast />

<div transition:persist="navbar-margin" id="bottom-page-margin" class="h-7 w-full"></div>

<div
	transition:persist="navbar"
	transition:animate="none"
	id="navbar"
	class="fixed bottom-0 z-[999] flex h-7 w-full max-w-full border-neutral-700 bg-black font-work-sans text-sm text-white transition-all"
>
	<div id="navbar-main-actions" class="flex">
		<DropdownMenu id="navbar-explore" label="Explorer" truncate="medium" borderRight chevron>
			<Icon name="carbon:network-1" class="h-[17px]" slot="icon" />
			<div class="hidden border-x-0 px-3 py-[6px] leading-tight text-neutral-500 medium:block">
				Explorer
			</div>
			<DropdownItem width={106} label="Portfolio" href="/portfolio" />
			<DropdownItem label="Blog" href="/" />
			<DropdownItem label="Appareils" href="/gear" />
			<DropdownItem label="Cuisine" href="/kitchen" />
			<DropdownItem label="Journal" href="/diary" />
			<DropdownItem label="Wiki" href="/wiki" />
			<DropdownItem label="À propos" href="/website" />
		</DropdownMenu>
		<a
			id="navbar-parent-link"
			class:list={[
				"group relative m-0 flex h-full items-center justify-center gap-2 border-r border-neutral-700 p-0 px-3 hover:bg-white hover:text-black",
				{
					hidden: !parent,
				},
			]}
			href={parent?.href}
		>
			<Icon name="charm:home" class="h-[14px]" />
			<div id="navbar-parent-text" class="truncate whitespace-nowrap small:max-w-[20vw]">
				{parent?.title}
			</div>
			<div
				class="absolute -right-[3px] top-3 z-[1000] h-[4px] w-[4px] rotate-45 border-r border-t border-neutral-700 bg-black group-hover:bg-white"
			>
			</div>
		</a>
		<button
			id="navbar-copy-link"
			style="padding-block: unset;"
			class="group relative m-0 flex h-full items-center justify-center gap-2 border-r border-neutral-700 p-0 px-3 hover:bg-white hover:text-black medium:px-2"
		>
			<Icon id="navbar-link-icon" name="ic:baseline-link" class="h-[17px]" />
			<Icon id="navbar-link-checkmark" name="ic:baseline-check" class="hidden h-[17px]" />
			<div id="navbar-loading-icon" class="hidden h-[17px] w-[17px] animate-spin">
				<Fragment set:html={spinner} />
			</div>
			<div id="navbar-title" class="truncate mediumlarge:max-w-[20vw] medium:hidden">
				{title}
			</div>
		</button>
		<DropdownMenu
			id="navbar-toc"
			label="Table des matières"
			truncate="mediumlarge"
			borderRight
			initiallyHidden={!headings || headings.length <= 1}
		>
			<Icon id="navbar-link-icon" name="ic:baseline-toc" class="h-[17px] rotate-180" slot="icon" />
			<div
				class="line-clamp-2 hidden w-[192px] border-x-0 px-3 py-[6px] leading-tight text-neutral-500 medium:block"
			>
				Table des matières
			</div>
			{
				headings
					?.filter((h) => h.depth == 2)
					.map((h, i) => (
						<DropdownItem label={`${i + 1}. ${h.text}`} href={`#${h.slug}`} width={192} />
					))
			}
		</DropdownMenu>
		<DropdownMenu
			id="navbar-related"
			label={relatedTitle}
			truncate="medium"
			borderRight
			initiallyHidden={!related || related.length == 0}
		>
			<Icon name="ph:share-network" class="h-[16px]" slot="icon" />
			<div
				id="navbar-related-mobile-title"
				class="line-clamp-2 hidden w-[192px] border-x-0 px-3 py-[6px] leading-tight text-neutral-500 medium:block"
			>
				{relatedTitle}
			</div>
			{
				[0, 1, 2].map((i) => (
					<DropdownItem
						label={(related && related[i]?.title) || "undefined"}
						href={(related && related[i]?.href) || "#"}
						initiallyHidden={!related || !related[i]}
						width={192}
					/>
				))
			}
		</DropdownMenu>
	</div>
	<div id="navbar-image-actions" class="flex hidden">
		<DownloadLink id="navbar-download-lowres-image" label="Basse qualité" shortLabel="SD" href="" />
		<DownloadLink id="navbar-download-hires-image" label="Haute qualité" shortLabel="HD" href="" />
		<DownloadLink
			id="navbar-download-original-image"
			label="Original (png)"
			shortLabel="Original"
			href=""
		/>
	</div>
	<div id="navbar-popup-actions" class="flex hidden">
		<InactiveItem id="navbar-popup-title" label="Titre" borderRight truncate />
		<a
			id="navbar-popup-library"
			class="group relative m-0 flex h-full items-center justify-center gap-2 border-r border-neutral-700 p-0 px-3 hover:bg-white hover:text-black medium:px-2"
			href=""
		>
			<div class="whitespace-nowrap medium:hidden">Dans ma bibliothèque</div>
			<Icon name="lucide:library-square" class="h-[17px]" />
		</a>
		{
			[1, 2, 3].map((i) => (
				<ExternalLink id={`navbar-popup-link-${i}`} label={`Lien ${i}`} href="" />
			))
		}
	</div>
	<div class="grow"></div>
	<SearchBar ssr={ssr} />
	<NavbarToggleButton
		textAndBorderClasses="border-neutral-500 text-neutral-400 group-hover:border-white group-hover:text-white"
	/>
</div>

<div id="navbar-data" class="hidden" data-props={JSON.stringify(Astro.props)}></div>

<script>
	// Update when the page changes, according to the props in #navbar-data
	import type { NavBarProps } from "$utils/navbar"

	document.addEventListener("astro:after-swap", () => {
		const dataDiv = document.getElementById("navbar-data") as HTMLDivElement
		const props = JSON.parse(dataDiv.dataset.props as string) as NavBarProps
		// Update parent link
		const parentLink = document.querySelector("#navbar-parent-link") as HTMLLinkElement
		const parentText = document.querySelector("#navbar-parent-text") as HTMLLinkElement
		if (props.parent) {
			parentText.innerText = props.parent.title
			parentLink.href = props.parent.href
			parentLink.classList.remove("hidden")
		} else {
			parentLink.classList.add("hidden")
		}
		// Update title
		;(document.querySelector("#navbar-title") as HTMLDivElement).innerText = props.title
		// Update table of contents
		const tocParent = document.querySelector("#navbar-toc-parent") as HTMLDivElement
		const tocContainer = document.querySelector("#navbar-toc-items-container") as HTMLDivElement
		if (!props.headings || props.headings.length <= 1) {
			tocParent.classList.add("hidden")
		} else {
			// Empty the container then create new items
			// TODO: Improve by using a template
			tocContainer.innerHTML = ""
			props.headings
				.filter((h) => h.depth == 2)
				.forEach((heading, index) => {
					const item = document.createElement("a")
					item.className =
						"line-clamp-2 flex items-center border-x-0 px-3 py-[6px] leading-tight hover:bg-white hover:text-black"
					item.style.width = "192px"
					item.href = `#${heading.slug}`
					item.innerText = `${index + 1}. ${heading.text}`
					tocContainer.appendChild(item)
				})
			tocParent.classList.remove("hidden")
		}
		// Update related articles
		const relatedParent = document.querySelector("#navbar-related-parent") as HTMLDivElement
		const relatedText = document.querySelector("#navbar-related-text") as HTMLDivElement
		const relatedMobileText = document.querySelector(
			"#navbar-related-mobile-title"
		) as HTMLDivElement
		if (props.related && props.related.length > 0) {
			relatedText.innerText = props.relatedTitle || "Voir aussi"
			relatedMobileText.innerText = props.relatedTitle || "Voir aussi"
			relatedParent.classList.remove("hidden")
			const items = document.querySelectorAll(
				"#navbar-related-dropdown a"
			) as NodeListOf<HTMLLinkElement>
			items.forEach((item, index) => {
				const related = props.related![index]
				if (related) {
					item.classList.remove("hidden")
					item.innerText = related.title
					item.href = related.href
				} else {
					item.classList.add("hidden")
				}
			})
		} else {
			relatedParent.classList.add("hidden")
		}
	})
</script>

<script>
	// Display download links when an image is opened with MediumZoom
	window.mediumZoom.on("open", (event: any) => {
		// Toggle visibility
		;(document.querySelector("#navbar-main-actions") as HTMLDivElement).classList.add("hidden")
		;(document.querySelector("#navbar-popup-actions") as HTMLDivElement).classList.add("hidden")
		;(document.querySelector("#navbar-image-actions") as HTMLDivElement).classList.remove("hidden")
		// Get divs
		const img = event.detail.zoom.getZoomedImage() as HTMLImageElement
		const data = img.dataset
		const local = data.width
		const lowResLink = document.querySelector("#navbar-download-lowres-image") as HTMLLinkElement
		const hiResLink = document.querySelector("#navbar-download-hires-image") as HTMLLinkElement
		const originalLink = document.querySelector(
			"#navbar-download-original-image"
		) as HTMLLinkElement
		// img.src link. When local, it's the low res image (display the resolution).
		// When remote, it can either be the only available image or the low res one.
		lowResLink.href = img.src
		;(document.querySelector("#navbar-download-lowres-image-text") as HTMLDivElement).innerText =
			local ? `${data.width}×${data.height} (webp)` : data.zoomSrc ? "Basse qualité" : "Télécharger"
		// Original link for local images
		if (data.originalSrc) {
			;(
				document.querySelector("#navbar-download-original-image-text") as HTMLDivElement
			).innerText = `${data.originalWidth}×${data.originalHeight} (${data.originalFormat} original)`
			originalLink.href = data.originalSrc as string
			originalLink.classList.remove("hidden")
		} else {
			originalLink.classList.add("hidden")
		}
		// Hi res link for local or remote images. In the case of remote images, it's the best option available.
		if (data.zoomSrc) {
			;(document.querySelector("#navbar-download-hires-image-text") as HTMLDivElement).innerText =
				local ? `${data.zoomWidth}×${data.zoomHeight} (webp)` : "Original"
			hiResLink.href = data.zoomSrc
			hiResLink.classList.remove("hidden")
		} else {
			hiResLink.classList.add("hidden")
		}
	})
	// Hide download links when an image is closed with MediumZoom
	window.mediumZoom.on("close", () => {
		;(document.querySelector("#navbar-image-actions") as HTMLLinkElement).classList.add("hidden")
		if (window.popupsOpened > 0) {
			;(document.querySelector("#navbar-popup-actions") as HTMLLinkElement).classList.remove(
				"hidden"
			)
		} else {
			;(document.querySelector("#navbar-main-actions") as HTMLLinkElement).classList.remove(
				"hidden"
			)
		}
	})
</script>

<script>
	// Keyboard shortcut to toggle navbar
	import { toggleNavbar, isMac } from "$utils/navbar"

	const keyDownHandler = (event: KeyboardEvent) => {
		const mac = isMac()
		if (!mac && event.ctrlKey && event.key === "k") {
			toggleNavbar()
		}
		if (mac && event.metaKey && event.key === "k") {
			toggleNavbar()
		}
	}
	window.addEventListener("keydown", keyDownHandler)
</script>

<script>
	import { toast } from "$utils/navbar"

	// Copy link button (without anchors)
	const button = document.querySelector("#navbar-copy-link") as HTMLButtonElement
	button.addEventListener("click", () => {
		toast("Lien copié dans le presse-papiers.")
		navigator.clipboard.writeText(window.location.href.split("#")[0])
		const linkIcon = document.querySelector("#navbar-link-icon") as HTMLDivElement
		const checkmark = document.querySelector("#navbar-link-checkmark") as HTMLDivElement
		linkIcon.classList.add("hidden")
		checkmark.classList.remove("hidden")
		setTimeout(() => {
			checkmark.classList.add("hidden")
			if (!window.nextPageIsLoading) {
				linkIcon.classList.remove("hidden")
			}
		}, 1000)
	})
</script>

<script>
	// Page loading spinner
	document.addEventListener("astro:before-preparation", () => {
		// display only if the loading is longer than 200ms to avoid flickering
		window.nextPageIsLoading = true
		setTimeout(() => {
			if (window.nextPageIsLoading) {
				;(document.querySelector("#navbar-link-icon") as HTMLDivElement).classList.add("hidden")
				;(document.querySelector("#navbar-loading-icon") as HTMLDivElement).classList.remove(
					"hidden"
				)
			}
		}, 200)
	})
	document.addEventListener("astro:after-preparation", () => {
		window.nextPageIsLoading = false
		;(document.querySelector("#navbar-link-icon") as HTMLDivElement).classList.remove("hidden")
		;(document.querySelector("#navbar-loading-icon") as HTMLDivElement).classList.add("hidden")
	})
</script>

<style is:global>
	#navbar a:link {
		@apply no-underline;
	}
</style>
