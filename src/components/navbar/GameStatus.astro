---
import { getImage } from "astro:assets"
import png from "$styles/assets/spritesheet.png"
const spritesheet = await getImage({ src: png, format: "webp" })
---

<div
	data-state="fullscreen"
	class="fixed bottom-0 right-0 h-screen max-h-[calc(100dvh-28px)] w-svw max-w-md pl-1 pt-1 medium:pl-1 medium:pt-1"
>
	<iframe class="h-full w-full rounded-tl border-2 border-b-0 border-[#1c1817] bg-[#1c1817]"
	></iframe>
</div>

<div data-state="error" class="w-48 p-3 leading-tight">
	<p id="error-message">Une erreur inconnue est survenue.</p>
	<p>Vous pouvez signaler l'erreur à aureliendsantos@ gmail.com</p>
	<button
		id="reload-page"
		class="navbar-colors navbar-hover-colors mt-3 block w-full border p-1 text-center leading-snug"
	>
		Recharger la page
	</button>
	<button
		id="disconnect-character"
		class="navbar-colors navbar-hover-colors mt-3 block w-full border p-1 text-center leading-snug"
	>
		Déconnecter le personnage
	</button>
</div>

<div data-state="intro" class="max-h-svh w-48 overflow-y-auto p-3 leading-tight">
	<p class="mb-3">
		Vous vous réveillez sur le sable froid et humide, avec un sacré mal de crâne. Vous vous
		redressez difficilement et scrutez les alentours.
	</p>
	<p>
		Vous vous trouvez sur le rivage d'une île mystérieuse, entourée par l'immensité de l'océan. Vous
		ne vous souvenez de rien, mais une chose est certaine : vous devez survivre.
	</p>
	<button
		id="intro-to-create"
		class="navbar-colors navbar-hover-colors mt-3 block w-full border p-1 text-center leading-snug"
	>
		Commencer
	</button>
</div>

<div data-state="create" class="w-48 overflow-hidden p-3 leading-loose">
	<form id="create-character">
		<label for="account">Nom de compte</label>
		<input
			name="account"
			id="account"
			type="text"
			required
			class="navbar-colors navbar-hover-colors navbar-bg w-full border px-2"
		/>
		<label for="character">Nom de personnage</label>
		<input
			name="character"
			id="character"
			type="text"
			required
			class="navbar-colors navbar-hover-colors navbar-bg w-full border px-2"
		/>
		<label for="map">Choisir un monde</label>
		<select
			name="map"
			id="map"
			required
			class="navbar-colors navbar-hover-colors navbar-bg w-full border p-1 disabled:text-neutral-500"
		>
			<option value="" disabled selected>Chargement...</option>
		</select>
		<button
			type="submit"
			class="navbar-colors navbar-hover-colors mt-3 block w-full border p-1 text-center leading-snug"
		>
			Créer le personnage
		</button>
	</form>
	<button id="create-to-login" class="mt-1 block opacity-50 hover:opacity-100">
		J'ai déjà un personnage
	</button>
</div>

<div data-state="login" class="w-48 overflow-hidden p-3 leading-loose">
	<form id="character-login">
		<label for="characterId">ID du personnage</label>
		<input
			name="characterId"
			id="characterId"
			type="text"
			required
			class="navbar-colors navbar-bg w-full border px-2"
		/>
		<button
			type="submit"
			class="navbar-colors navbar-hover-colors mt-3 block w-full border p-1 text-center leading-snug"
		>
			Se connecter
		</button>
	</form>
	<button id="login-to-create" class="mt-1 block opacity-50 hover:opacity-100">Retour</button>
</div>

<div
	data-state="overview"
	class="hidden w-48 overflow-hidden p-3 leading-loose"
	style={{ "--spr": `url(${spritesheet.src})` }}
>
	<div id="character-name" class="mt-1 leading-none"></div>
	<div class="flex justify-between">
		<div>Énergie</div>
		<div id="character-stamina"></div>
	</div>
	<div class="h-2.5 w-full bg-[--navbar-border] dark:bg-[--dark-navbar-border]">
		<div
			id="character-stamina-bar"
			class="h-full bg-[--navbar-text] dark:bg-[--dark-navbar-text]"
			style={{ width: "0%" }}
		>
		</div>
	</div>
	<div class="mt-[1px] flex justify-between">
		<div>Faim</div>
		<div id="character-hunger"></div>
	</div>
	<div class="h-2.5 w-full bg-[--navbar-border] dark:bg-[--dark-navbar-border]">
		<div
			id="character-hunger-bar"
			class="h-full bg-[--navbar-text] dark:bg-[--dark-navbar-text]"
			style={{ width: "0%" }}
		>
		</div>
	</div>
	<div class="mt-3">
		<span id="cell-terrain-title"></span> (<span id="cell-x"></span>:<span id="cell-y"></span>)
	</div>
	<div class="mb-3 grid grid-cols-4 gap-1">
		<div
			class="relative col-span-2 row-span-2 aspect-square bg-[--navbar-border] dark:bg-[--dark-navbar-border]"
		>
			<div id="cell-terrain-spritesheet" class="spritesheet"></div>
		</div>
		<div id="built-structures" class="col-span-2 row-span-2 grid grid-cols-subgrid gap-1"></div>
	</div>
	<div id="neighbours" class="leading-snug"></div>
	<button
		id="overview-to-fullscreen"
		class="navbar-colors navbar-hover-colors mt-3 block w-full border p-1 text-center leading-snug"
	>
		Ouvrir
	</button>
</div>

<script>
	import { toast } from "$utils/navbar"
	import enumerate from "$utils/formatting/enumerateStrings"
	import { getGameState, type GameState } from "$utils/game"

	// characterId must be present when changing to the "overview" state
	// message must be present when changing to the "error" state
	const changeGameState = (name: GameState, characterId?: string | null, message?: string) => {
		;(document.querySelectorAll("[data-state]") as NodeListOf<HTMLElement>).forEach((el) =>
			el.classList.toggle("hidden", el.dataset.state != name)
		)
		sessionStorage.setItem("gameState", name)
		// OVERVIEW state: update character information
		if (name == "overview") {
			if (!characterId) throw new Error("changeGameState: Missing characterId")
			updateOverview(characterId as string)
		}
		// FULLSCREEN state
		// show/hide the "back to overview" button in navbar
		// and toggle the campire/down icon in the navbar
		const fullscreenButton = document.getElementById("fullscreen-to-overview") as HTMLButtonElement
		const mainIcon = document.getElementById("navbar-game-main-icon") as HTMLElement
		const closeIcon = document.getElementById("navbar-game-close-icon") as HTMLElement
		if (name == "fullscreen") {
			fullscreenButton.classList.remove("hidden")
			mainIcon.classList.add("hidden")
			closeIcon.classList.remove("hidden")
		} else {
			fullscreenButton.classList.add("hidden")
			mainIcon.classList.remove("hidden")
			closeIcon.classList.add("hidden")
		}
		// ERROR state: display error message if available
		if (name == "error" && message)
			(document.getElementById("error-message") as HTMLDivElement).textContent = message as string
	}
	async function query(path: string, method: string, body?: any) {
		try {
			const response = await fetch("https://survie.aureliendossantos.com/api/" + path, {
				method: method,
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify(body),
			})
			if (!response.ok) {
				toast(
					`Le jeu de survie a rencontré une erreur ${response.status == 500 ? "du serveur" : response.status}.`,
					4000,
					"right"
				)
				changeGameState("error", undefined, `Une erreur ${response.status} est survenue.`)
				return null
			}
			return await response.json()
		} catch (error) {
			// if error is an Error object, display its message
			const message = error instanceof Error ? error.message : "Erreur inconnue"
			toast(`Erreur : ${message}`, 4000, "right")
			changeGameState(
				"error",
				undefined,
				`Une erreur est survenue lors de la requête (fetch error) : ${message}`
			)
			return null
		}
	}

	async function updateOverview(characterId: string) {
		const res = await query(`characters/${characterId}`, "GET")
		if (!res) return
		const { character, cell } = res
		const neighbours = cell.characters.filter((c: any) => c.id != character.id)
		;(document.getElementById("character-name") as HTMLDivElement).textContent = character.name
		;(document.getElementById("character-stamina") as HTMLDivElement).textContent =
			character.stamina
		;(document.getElementById("character-stamina-bar") as HTMLDivElement).style.width =
			character.stamina * 10 + "%"
		;(document.getElementById("character-hunger") as HTMLDivElement).textContent = character.hunger
		;(document.getElementById("character-hunger-bar") as HTMLDivElement).style.width =
			character.hunger * 10 + "%"
		;(document.getElementById("cell-terrain-title") as HTMLSpanElement).textContent =
			cell.terrain.title
		;(document.getElementById("cell-x") as HTMLSpanElement).textContent = cell.x
		;(document.getElementById("cell-y") as HTMLSpanElement).textContent = cell.y
		;(document.getElementById("cell-terrain-spritesheet") as HTMLDivElement).className =
			`spritesheet ${cell.terrain.id}`
		;(document.getElementById("built-structures") as HTMLDivElement).innerHTML =
			cell.builtStructures
				.slice(0, 4)
				.map(
					(s: any) =>
						`<div class="relative aspect-square bg-[--navbar-border] dark:bg-[--dark-navbar-border]"><div class="spritesheet ${s.structure.id}"></div></div>`
				)
				.join("")
		;(document.getElementById("neighbours") as HTMLDivElement).textContent =
			neighbours.length > 0
				? `${enumerate(neighbours.map((c: any) => c.name))} se trouve${
						neighbours.length > 1 ? "nt" : ""
					} ici.`
				: ""
	}

	const characterId = localStorage.getItem("characterId")
	// Default game state when page loads
	changeGameState(characterId ? "overview" : "intro", characterId as string)
	;(document.getElementById("intro-to-create") as HTMLButtonElement).addEventListener(
		"click",
		async () => {
			changeGameState("create")
			// Fetching available maps (worlds) for the character creation form
			const res = await query("map", "GET")
			if (!res) return
			const maps: { id: number }[] = res
			const select = document.querySelector("select#map") as HTMLSelectElement
			select.innerHTML = maps.map((m) => `<option value="${m.id}">Monde ${m.id}</option>`).join("")
		}
	)
	;(document.getElementById("create-to-login") as HTMLButtonElement).addEventListener("click", () =>
		changeGameState("login")
	)
	;(document.getElementById("login-to-create") as HTMLButtonElement).addEventListener("click", () =>
		changeGameState("create")
	)
	;(document.getElementById("create-character") as HTMLFormElement).addEventListener(
		"submit",
		async (event) => {
			event.preventDefault()
			// Creating user
			const userBody = {
				name: (document.querySelector("input#account") as HTMLInputElement).value,
			}
			const res = await query("users", "POST", userBody)
			if (!res) return
			const { data: user } = res
			console.log("userId: " + user.id)
			// Creating character for this user
			const characterBody = {
				name: (document.querySelector("input#character") as HTMLInputElement).value,
				userId: user.id,
				mapId: Number((document.querySelector("select#map") as HTMLInputElement).value),
			}
			const res2 = await query("characters", "POST", characterBody)
			if (!res2) return
			const { data: character } = res2
			localStorage.setItem("characterId", character.id)
			changeGameState("overview", character.id)
		}
	)
	;(document.getElementById("character-login") as HTMLFormElement).addEventListener(
		"submit",
		async (event) => {
			event.preventDefault()
			const characterId = (document.querySelector("input#characterId") as HTMLInputElement).value
			localStorage.setItem("characterId", characterId)
			changeGameState("overview", characterId)
		}
	)
	;(document.getElementById("overview-to-fullscreen") as HTMLButtonElement).addEventListener(
		"click",
		async () => {
			changeGameState("fullscreen")
			const iframe = document.querySelector("iframe") as HTMLIFrameElement
			iframe.src = `https://survie.aureliendossantos.com/character/${localStorage.getItem(
				"characterId"
			)}`
		}
	)
	;(document.getElementById("fullscreen-to-overview") as HTMLButtonElement).addEventListener(
		"click",
		async () => {
			const characterId = localStorage.getItem("characterId")
			changeGameState(characterId ? "overview" : "intro", characterId as string)
		}
	)
	;(document.getElementById("reload-page") as HTMLButtonElement).addEventListener("click", () =>
		location.reload()
	)
	;(document.getElementById("disconnect-character") as HTMLButtonElement).addEventListener(
		"click",
		() => {
			if (
				confirm(
					"Pour reconnecter le personnage, vous devrez entrer son ID. Continuer la déconnexion ?"
				)
			) {
				localStorage.removeItem("characterId")
				changeGameState("intro")
			}
		}
	)

	// Doing stuff when the game becomes visible or hidden
	const observer = new MutationObserver((mutations) => {
		mutations.forEach((mutation) => {
			const targetDiv = mutation.target as HTMLElement
			// Game is invisible. Hiding navbar fullscreen button
			if (targetDiv.classList.contains("invisible")) {
				const fullscreenButton = document.getElementById(
					"fullscreen-to-overview"
				) as HTMLButtonElement
				fullscreenButton.classList.add("hidden")
				// Hiding alternative icon
				;(document.getElementById("navbar-game-main-icon") as HTMLElement).classList.remove(
					"hidden"
				)
				;(document.getElementById("navbar-game-close-icon") as HTMLElement).classList.add("hidden")
			}
			// Game is visible. Calling changeState to apply needed state transitions
			else changeGameState(getGameState(), localStorage.getItem("characterId"))
		})
	})
	observer.observe(document.getElementById("navbar-game-dropdown") as HTMLDivElement, {
		attributeFilter: ["class"],
	})
</script>

<style is:global>
	.spritesheet {
		background-image: var(--spr);
		background-size: 900% 700%;
		@apply absolute left-0 top-0 h-full w-full invert-[calc(var(--navbar-is-dark)*100%)] dark:invert-[calc(var(--dark-navbar-is-dark)*100%)];
	}
	.plains {
		@apply bg-[-400%_-300%];
	}
	.forest {
		@apply bg-[-400%_-200%];
	}
	.mountains {
		@apply bg-[-300%_-200%];
	}
	.beach {
		@apply bg-[-500%_-200%];
	}
	.sea {
		@apply bg-[-500%_-300%];
	}
	.camp {
		@apply bg-[-600%_-300%];
	}
	.workbench {
		@apply bg-[-400%_-500%];
	}
	.chest {
		@apply bg-[-500%_-500%];
	}
</style>
