---
import TagLabel from "$components/blog/TagLabel.astro"
import { getEntry, type CollectionEntry } from "astro:content"
import { getContentEntries } from "$utils/getCollection"
import getUniqueValuesAndOccurences from "$utils/getUniqueValuesAndOccurences"

interface Props {
	collectionKey: "tags" | "places" | "muses"
	currentEntry?: CollectionEntry<"tags" | "places" | "muses">
}
const { collectionKey, currentEntry } = Astro.props

const content = await getContentEntries()
const rawTagSlugs = [
	...content.map((entry) =>
		collectionKey in entry.data ? entry.data[collectionKey].map((item) => item.slug) : []
	),
]
const tagSlugsToOccurences = getUniqueValuesAndOccurences(rawTagSlugs)
const tags = (
	await Promise.all(
		Object.entries(tagSlugsToOccurences).map(async ([tagSlug, occurences]) => ({
			count: occurences,
			entry: (await getEntry(collectionKey, tagSlug))!,
		}))
	)
).filter((t) => t.entry) // Some tags may have Notion pages associated to it but no corresponding mdx file, hence the filter
---

{
	tags.map((tag) => (
		<>
			<TagLabel
				label={tag.entry.data.fullTitle || tag.entry.data.title}
				slug={tag.entry.slug}
				count={tag.count}
				parent={collectionKey == "places" ? "blog/places" : collectionKey}
				disabled={tag.entry == currentEntry}
			/>{" "}
		</>
	))
}
