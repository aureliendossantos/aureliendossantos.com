---
import { getCollection, type CollectionEntry } from "astro:content"
import Game from "../mdx/mediaBlocks/Game.astro"
import Book from "../mdx/mediaBlocks/Book.astro"
import getIGDBgames, { type IGDBData } from "$utils/remoteData/igdb"

interface Props {
	article: CollectionEntry<"blog">
}

const { article } = Astro.props
const data = article.data
const references = [...data.games, ...data.books]

/**
 * Check if all referenced games are present in the cache data.
 * If not, fetch all referenced games from IGDB in a single request,
 * which is faster than fetching only the missing ones, one by one.
 * @param slugs List of games slugs referenced in the article.
 * @returns List of IGDBData.
 */
const getGames = async (slugs: string[]) => {
	const cacheData = await getCollection("games")
	const cachedGames = (
		await Promise.all(
			slugs.map(async (slug) => {
				const cachedGame = cacheData.find(({ data }) => data.igdb && data.slug == slug)
				if (cachedGame) return cachedGame.data.igdb
				return null
			})
		)
	).filter((game) => game)
	if (cachedGames.length == slugs.length) return cachedGames as IGDBData[]
	return await getIGDBgames(slugs)
}

const gamesData = data.games.length > 0 ? await getGames(data.games) : []
---

{
	references.length > 0 && (
		<>
			<h2>Dans cet article</h2>
			{gamesData.map((data) => (
				<Game data={data} />
			))}
			{data.books.map((id: string) =>
				id.startsWith("OL") ? <Book olid={id} /> : <Book isbn={id} />
			)}
		</>
	)
}
