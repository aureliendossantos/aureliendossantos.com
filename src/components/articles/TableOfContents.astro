---
import type { MarkdownHeading } from "astro"
import TocHeading from "./TocHeading.astro"

interface Props {
	headings: MarkdownHeading[]
	firstLevel?: number
	depth?: number
}
const { headings, firstLevel, depth } = Astro.props

const toc = buildToc(headings)
console.log(toc)

export type HeadingWithSubs = MarkdownHeading & {
	subheadings: HeadingWithSubs[]
}

/**
 * Source: https://kld.dev/building-table-of-contents/
 * Takes the flat array of headings and return a nested array.
 * See also similar implementation from the Astro Docs:
 * https://github.com/withastro/docs/blob/882e0b0a9d16d1c822cb8c230a62a4bfcd308605/src/util/generateToc.ts
 * @param flatHeadings headings from Astro
 */
function buildToc(flatHeadings: MarkdownHeading[]) {
	const toc: HeadingWithSubs[] = []
	const parentHeadings = new Map()
	flatHeadings.forEach((flatHeading) => {
		const heading = { ...flatHeading, subheadings: [] }
		parentHeadings.set(heading.depth, heading)
		// Change 2 to 1 if your markdown includes your <h1>
		if (heading.depth === (firstLevel || 2)) {
			toc.push(heading)
		} else if (!depth || heading.depth <= depth) {
			const parent = parentHeadings.get(heading.depth - 1)
			if (parent) {
				parent.subheadings.push(heading)
			} else {
				toc.push(heading)
			}
		}
	})
	return toc
}
---

<nav class="toc">
	<ol class="pl-0 medium:pl-[40px]">
		{toc.map((heading) => <TocHeading heading={heading} />)}
	</ol>
</nav>
