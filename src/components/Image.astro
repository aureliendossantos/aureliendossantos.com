---
import type { ImageQuality } from "astro"
import {
	type LocalImageProps,
	type RemoteImageProps,
	getConfiguredImageService,
	getImage,
	inferRemoteSize,
} from "astro:assets"
import type { LocalImageServiceWithPlaceholder } from "$utils/imageService"

export type Props = (LocalImageProps | RemoteImageProps) & {
	zoomQuality?: ImageQuality
	notZoomable?: boolean
}
const {
	src: srcToResolve,
	alt,
	width: maxWidth,
	height: maxHeight,
	quality,
	zoomQuality,
	notZoomable,
	...attributes
} = Astro.props

const src =
	typeof srcToResolve == "object" && "then" in srcToResolve
		? (await srcToResolve).default
		: srcToResolve

const remoteSize = typeof src == "string" ? await inferRemoteSize(src) : null
const width = remoteSize && maxWidth ? Math.min(remoteSize.width, maxWidth) : maxWidth
// getImage can't calculate the height of remote images.
// If remoteSize is set, we use the remoteSize ratio to calculate the new height.
// if remoteSize is set, calculate the ratio between the width and the height
const height = remoteSize && width ? width / (remoteSize.width / remoteSize.height) : maxHeight

// The style must be a JSX object and not a string in order to be preserved
const style = typeof attributes.style == "object" ? attributes.style : null

const webp = await getImage({
	src: src,
	width: width || remoteSize?.width,
	height: height || remoteSize?.height,
	quality: quality,
	...attributes,
})

/* If the source image is larger than the width of the processed image,
we generate a larger image for medium-zoom, that won't exceed 2160px in height
(in rare cases, a 3840px max width might be more relevant). */
const zoomedImage =
	remoteSize && remoteSize.width > webp.attributes.width
		? await getImage({
				src: src,
				width: remoteSize.width,
				height: remoteSize.height,
				quality: zoomQuality || quality,
				...attributes,
			})
		: width && typeof src != "string" && src.width > width
			? await getImage({
					src: src,
					width: src.height < 2160 && Math.min(src.width, 3840),
					height: src.height >= 2160 && Math.min(src.height, 2160),
					quality: zoomQuality || quality,
					...attributes,
				})
			: undefined

// Using the custom imageService to generate a placeholder image
const imageService = (await getConfiguredImageService()) as LocalImageServiceWithPlaceholder
const placeholderURL =
	typeof src == "string"
		? await imageService.generatePlaceholder(src, remoteSize.width, remoteSize.height)
		: await imageService.generatePlaceholder(src.src, src.width, src.height)
---

<picture>
	{/*src.format != "gif" && <source srcset={avif.src} type={"image/" + avif.options.format} />*/}
	<img
		src={webp.src}
		style={{
			backgroundSize: "cover",
			backgroundImage: `url(${placeholderURL})`,
			imageRendering: "auto",
			...style,
		}}
		onload="this.style.backgroundImage = 'none';"
		alt={alt}
		data-zoomable={!notZoomable}
		data-zoom-src={zoomedImage?.src}
		data-width={webp.attributes.width}
		data-height={remoteSize ? null : webp.attributes.height}
		data-zoom-width={zoomedImage?.attributes.width}
		data-zoom-height={remoteSize ? null : zoomedImage?.attributes.height}
		data-original-src={typeof src == "string" ? src : src.src}
		data-original-width={remoteSize?.width || src.width}
		data-original-height={remoteSize ? null : src.height}
		data-original-format={remoteSize?.format || src.format}
		{...webp.attributes}
	/>
</picture>
