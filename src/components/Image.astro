---
import type { ImageMetadata, ImageQuality } from "astro"
import type { HTMLAttributes } from "astro/types"
import { getConfiguredImageService, getImage } from "astro:assets"
import type { LocalImageServiceWithPlaceholder } from "$utils/imageService"

export interface Props extends Omit<HTMLAttributes<"img">, "src"> {
	src: ImageMetadata | Promise<{ default: ImageMetadata }>
	alt: string
	width?: number
	height?: number
	quality?: ImageQuality
	zoomQuality?: ImageQuality
	notZoomable?: boolean
}
const {
	src: srcToResolve,
	alt,
	width,
	height,
	quality,
	zoomQuality,
	notZoomable,
	...attributes
} = Astro.props

const src = "then" in srcToResolve ? (await srcToResolve).default : srcToResolve

const webp = await getImage({
	src: src,
	width: width,
	height: height,
	quality: quality,
	...attributes,
})

/* If the source image is larger than the width of the processed image,
we generate a larger image for medium-zoom, that won't exceed 2160px in height
(in rare cases, a 3840px max width might be more relevant). */
const zoomedImage =
	width && src.width > width
		? await getImage({
				src: src,
				width: src.height < 2160 && Math.min(src.width, 3840),
				height: src.height >= 2160 && Math.min(src.height, 2160),
				quality: zoomQuality || quality,
				...attributes,
		  })
		: undefined

// Using the custom imageService to generate a placeholder image
const imageService = (await getConfiguredImageService()) as LocalImageServiceWithPlaceholder
// Placeholders are temporarily disabled to avoid a "no such file or directory" bug during build
// const placeholderURL = await imageService.generatePlaceholder(src.src, src.width, src.height)
---

<picture>
	{/*src.format != "gif" && <source srcset={avif.src} type={"image/" + avif.options.format} />*/}
	<img
		src={webp.src}
		style={`background-size: cover;background-color:rgba(0.5,0.5,0.5,0.5);image-rendering:auto;`}
		onload="
		this.style.backgroundColor = 'unset';
		this.style.backgroundImage = 'none';
		"
		alt={alt}
		data-zoomable={!notZoomable}
		data-zoom-src={zoomedImage?.src}
		data-width={webp.attributes.width}
		data-height={webp.attributes.height}
		data-zoom-width={zoomedImage?.attributes.width}
		data-zoom-height={zoomedImage?.attributes.height}
		data-original-src={src.src}
		data-original-width={src.width}
		data-original-height={src.height}
		data-original-format={src.format}
		{...webp.attributes}
	/>
</picture>
