---
import type { ImageQuality } from "astro"
import {
	type LocalImageProps,
	type RemoteImageProps,
	getConfiguredImageService,
	getImage,
	inferRemoteSize,
} from "astro:assets"
import type { LocalImageServiceWithPlaceholder } from "$utils/imageService"

export type Props = (LocalImageProps | RemoteImageProps) & {
	zoomQuality?: ImageQuality
	notZoomable?: boolean
}
const {
	src: srcToResolve,
	alt,
	width: maxWidth,
	height: maxHeight,
	widths,
	sizes,
	quality,
	zoomQuality,
	notZoomable,
	...attributes
} = Astro.props

const image =
	typeof srcToResolve == "string"
		? { src: srcToResolve, remote: true as const, remoteSize: await inferRemoteSize(srcToResolve) }
		: "then" in srcToResolve
			? { src: (await srcToResolve).default, remote: false as const }
			: { src: srcToResolve, remote: false as const }

const width =
	maxWidth &&
	(image.remote
		? Math.min(image.remoteSize.width, Number(maxWidth))
		: Math.min(image.src.width, Number(maxWidth)))
// getImage can't calculate the height of remote images.
// If remoteSize is set, we use the remoteSize ratio to calculate the new height.
// if remoteSize is set, calculate the ratio between the width and the height
const height = image.remote
	? width && width / (image.remoteSize.width / image.remoteSize.height)
	: maxHeight && Math.min(image.src.height, Number(maxHeight))

// The style must be a JSX object and not a string in order to be preserved
if (typeof attributes.style == "string")
	throw new Error("The style attribute must be a JSX object and not a string.")

const webp = await getImage({
	src: image.src,
	width: width || image.remoteSize?.width,
	height: height || image.remoteSize?.height,
	widths,
	sizes,
	quality: quality,
	...attributes,
})

/* If the source image is larger than the width of the processed image,
we generate a larger image for medium-zoom, that won't exceed 2160px in height
(in rare cases, a 3840px max width might be more relevant). */
const zoomedImage =
	image.remoteSize && image.remoteSize.width > webp.attributes.width
		? await getImage({
				src: image.src,
				width: image.remoteSize.width,
				height: image.remoteSize.height,
				quality: zoomQuality || quality,
				widths: undefined,
				sizes: undefined,
				...attributes,
			})
		: width && !image.remote && image.src.width > Number(width)
			? await getImage({
					src: image.src,
					width: image.src.height < 2160 && Math.min(image.src.width, 3840),
					height: image.src.height >= 2160 && Math.min(image.src.height, 2160),
					quality: zoomQuality || quality,
					widths: undefined,
					sizes: undefined,
					...attributes,
				})
			: undefined

// Using the custom imageService to generate a placeholder image
/*
const imageService = (await getConfiguredImageService()) as LocalImageServiceWithPlaceholder
const placeholderURL = image.remote
	? await imageService.generatePlaceholder(
			image.src,
			image.remoteSize.width,
			image.remoteSize.height
		)
	: await imageService.generatePlaceholder(image.src.src, image.src.width, image.src.height)
**/

const firstSrcSet = webp.srcSet.values[0]
// TODO: remove zoom-src logic and use srcset instead (by default, the "sizes" attribute will be equal to the width given in props, and we'll generate many widths in srcset: 0.5, 1, 2, 3, 4... to a maximum of 3840px)
// OU BIEN: voir si je peux juste utiliser densities 1x 2x 3x et que mêlé à la width dans la page, il prend tout seul la densité supérieure quand je medium zoom
---

<img
	src={firstSrcSet ? firstSrcSet.url : webp.src}
	srcset={webp.srcSet.attribute || undefined}
	style={{
		backgroundSize: "cover",
		// backgroundImage: `url(${placeholderURL})`,
		imageRendering: "auto",
		...attributes.style,
	}}
	onload="this.style.backgroundImage = 'none';"
	{alt}
	data-zoomable={!notZoomable}
	data-zoom-src={zoomedImage?.src}
	data-width={firstSrcSet ? firstSrcSet.transform.width : webp.attributes.width}
	data-height={firstSrcSet ? firstSrcSet.transform.height : webp.attributes.height}
	data-zoom-width={zoomedImage?.attributes.width}
	data-zoom-height={zoomedImage?.attributes.height}
	data-original-src={image.remote ? image.src : image.src.src}
	data-original-width={image.remote ? image.remoteSize.width : image.src.width}
	data-original-height={image.remote ? image.remoteSize.height : image.src.height}
	data-original-format={image.remote ? image.remoteSize.format : image.src.format}
	{...webp.attributes}
/>

<style is:global>
	/* Images with class="h-full w-full object-contain" will have their placeholder stretched without this rule.
	FIXME: It is still not ideal because the placeholder does not take into account exif rotation. */
	img.object-contain {
		background-size: contain !important;
		background-repeat: no-repeat;
		background-position: center;
	}
</style>
