---
import type { ImageMetadata, ImageQuality } from "astro"
import type { HTMLAttributes } from "astro/types"
import { getConfiguredImageService, getImage } from "astro:assets"
import type { LocalImageServiceWithPlaceholder } from "$utils/imageService"

export interface Props extends Omit<HTMLAttributes<"img">, "src"> {
	src: ImageMetadata
	alt: string
	width?: number
	height?: number
	quality?: ImageQuality
}
const { src, alt, width, height, quality, ...attributes } = Astro.props

/* const avif = await getImage({
	src: src,
	width: width,
	height: height,
	quality: quality,
	format: "avif",
	...attributes,
}) */
const webp = await getImage({
	src: src,
	width: width,
	height: height,
	quality: quality,
	format: "webp",
	...attributes,
})

// Using the custom imageService to generate a placeholder image
const imageService = (await getConfiguredImageService()) as LocalImageServiceWithPlaceholder
const placeholderURL = await imageService.generatePlaceholder(src.src, src.width, src.height)
---

<picture>
	{/*src.format != "gif" && <source srcset={avif.src} type={"image/" + avif.options.format} />*/}
	<img
		src={webp.src}
		style={`background-size: cover;background-image: url(${placeholderURL});image-rendering:auto;`}
		onload="this.removeAttribute('style');"
		alt={alt}
		{...webp.attributes}
	/>
</picture>
