---
import { getEntry, type CollectionEntry } from "astro:content"
import BaseLayout from "./BaseLayout.astro"
import getPalette, { getColor } from "$utils/palettes"
import ArticleHeader from "$components/ArticleHeader.astro"
import TableOfContents from "$components/TableOfContents.astro"
import type { MarkdownHeading } from "astro"
import "src/styles/articles.css"
import "$styles/tufte.css"
import { Layouts } from "$utils/layouts"
import getRelatedArticles from "$utils/getRelatedArticles"
import TufteHeader from "$components/blog/TufteHeader.astro"
import NavbarAccessFooter from "$components/NavbarAccessFooter.astro"
import getSeeAlso from "$utils/getSeeAlso"

interface Props {
	article: CollectionEntry<"blog"> | CollectionEntry<"pages">
	headings: MarkdownHeading[]
}

const { article, headings } = Astro.props
const data = article.data
const date = "date" in data ? data.date : undefined
const wide = "categories" in data && data.categories.includes("Photos")
// Alternative layouts
const customLayout = data.customLayout
const cormorant = data.layouts?.includes(Layouts.cormorant)
const tufte = data.layouts?.includes(Layouts.tufte)
const tufteHtml = (await Astro.slots.render("default")).replaceAll(
	"<section-switch></section-switch>",
	"</section><section>"
)
// Images
const ogImage = data.opengraph || data.image
const coverImage = data.cover && data.image ? data.image : undefined
const palette = getPalette(data.palette)
// Related articles
const isBlog = "categories" in data
const relatedArticles = isBlog
	? (await getRelatedArticles(article as CollectionEntry<"blog">)).map((a) => ({
			title: a.article.data.title,
			href: `/blog/${a.article.slug}`,
	  }))
	: await getSeeAlso(data.seeAlso)
const parent = !isBlog && data.parent && (await getEntry("pages", data.parent))
---

<BaseLayout
	ogType="article"
	title={data.title}
	description={data.description}
	date={date}
	image={ogImage?.src}
	bg={palette.bgColor}
	popupBorderColor={palette.popupBorderColor}
	popupLabelActiveBgColor={palette.popupLabelActiveBgColor}
	layout={data.layouts}
	navBarProps={{
		title: data.title,
		parent: isBlog
			? { title: "Blog", href: "/" }
			: parent && { title: parent.data.title, href: `/${parent.slug}` },
		related: relatedArticles,
		relatedTitle: isBlog ? "Articles similaires" : "Voir aussi",
		headings: headings,
	}}
>
	<div
		class="article-styling"
		style={{
			"--base-color": getColor(palette.baseColor),
			"--dark-base-color": getColor(palette.baseColor, "dark"),
			"--secondary-color": getColor(palette.secondaryColor),
			"--dark-secondary-color": getColor(palette.secondaryColor, "dark"),
			"--bg-color": getColor(palette.bgColor),
			"--dark-bg-color": getColor(palette.bgColor, "dark"),
			"--base-font": palette.baseFont,
			"--font-size": palette.fontSize,
			"--sm-font-size": Math.max(16, Number(palette.fontSize.replace("px", "")) - 1) + "px",
			"--line-height": palette.lineHeight,
			"--sm-line-height": palette.lineHeight * 1.1,
		}}
	>
		{
			!customLayout &&
				(tufte ? (
					<TufteHeader title={data.title} description={data.description} date={date} />
				) : (
					<ArticleHeader
						title={data.title}
						description={data.description}
						date={date}
						cover={coverImage}
						palette={palette}
						layouts={data.layouts}
						wide={wide}
						anchorTop={data.imageAnchorTop}
					/>
				))
		}
		{
			tufte ? (
				<>
					<section set:html={tufteHtml} />
					<NavbarAccessFooter />
				</>
			) : (
				<main
					class:list={{ "px-[80px] pb-16 medium:px-[40px] small:px-[20px]": !customLayout }}
					class="font-[family-name:--base-font] text-[length:--font-size] leading-[--line-height] text-[color:--base-color] small:text-[length:--sm-font-size] small:leading-[--sm-line-height] dark:text-[color:--dark-base-color]"
				>
					<div
						class:list={[
							{ "blog-article m-auto": !customLayout },
							{ "max-w-prose": !cormorant && !customLayout && !wide },
							{ "max-w-[75ch]": cormorant && !customLayout && !wide },
							{ "max-w-[700px]": wide },
						]}
					>
						{article.data.toc && <TableOfContents headings={headings} depth={article.data.depth} />}
						<slot />
						{!customLayout && <NavbarAccessFooter />}
					</div>
				</main>
			)
		}
	</div>
</BaseLayout>

<style
	define:vars={{ displayFont: palette.displayFont, headingsFont: palette.headingsFont }}
	is:global
>
	.article-styling {
		h1 {
			font-family: var(--displayFont);
		}
		h2,
		h3,
		h4,
		h5,
		h6 {
			font-family: var(--headingsFont);
		}
	}
</style>

<style
	define:vars={{
		secondaryColor: palette.secondaryColor,
		specialColor: palette.specialColor,
		mentionBgColor: palette.mentionBgColor,
		mentionHoverBgColor: palette.mentionHoverBgColor,
		codeFont: palette.codeFont,
	}}
	is:global
>
	blockquote,
	.note,
	.license,
	hr,
	.special-color {
		color: var(--specialColor);
	}
	figcaption,
	.secondary-color {
		color: var(--secondaryColor);
	}
	.bg-mention {
		background-color: var(--mentionBgColor);
	}
	.bg-mention:hover {
		background-color: var(--mentionHoverBgColor);
	}
	code,
	pre {
		font-family: var(--codeFont);
	}
</style>
