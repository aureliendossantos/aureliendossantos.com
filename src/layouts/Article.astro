---
import { type CollectionEntry } from "astro:content"
import BaseLayout from "./BaseLayout.astro"
import getPalette, { getColor } from "$utils/palettes"
import ArticleHeader from "$components/ArticleHeader.astro"
import TableOfContents from "$components/TableOfContents.astro"
import type { MarkdownHeading } from "astro"
import "src/styles/articles.scss"
import { Layouts } from "$utils/layouts"
import getRelatedArticles from "$utils/getRelatedArticles"

interface Props {
	article: CollectionEntry<"blog"> | CollectionEntry<"pages">
	headings: MarkdownHeading[]
}

const { article, headings } = Astro.props
const data = article.data
const date = "date" in data ? data.date : undefined
const wide = "categories" in data && data.categories.includes("Photos")
const customLayout = data.customLayout
const cormorant = data.layouts?.includes(Layouts.cormorant)
const ogImage = data.opengraph || data.image
const coverImage = data.cover && data.image ? data.image : undefined
const palette = getPalette(data.palette)
// Related articles
const isBlog = "categories" in data
const relatedArticles = isBlog
	? await getRelatedArticles(article as CollectionEntry<"blog">)
	: undefined
---

<BaseLayout
	ogType="article"
	title={data.title}
	description={data.description}
	date={date}
	image={ogImage?.src}
	bg={palette.bgColor}
	popupBorderColor={palette.popupBorderColor}
	popupLabelActiveBgColor={palette.popupLabelActiveBgColor}
	layout={data.layouts}
	navBarProps={{
		title: data.title,
		parent: isBlog ? { title: "Blog", href: "/" } : undefined,
		related: relatedArticles?.map((a) => ({
			title: a.article.data.title,
			href: `/blog/${a.article.slug}`,
		})),
	}}
>
	<div
		class="article-styling"
		style={{
			"--base-color": getColor(palette.baseColor),
			"--secondary-color": getColor(palette.secondaryColor),
			"--bg-color": getColor(palette.bgColor),
			"--base-font": palette.baseFont,
			"--font-size": palette.fontSize,
			"--line-height": palette.lineHeight,
			"--dark-base-color": getColor(palette.baseColor, "dark"),
		}}
	>
		{
			!customLayout && (
				<ArticleHeader
					title={data.title}
					description={data.description}
					date={date}
					cover={coverImage}
					palette={palette}
					layouts={data.layouts}
					wide={wide}
					anchorTop={data.imageAnchorTop}
				/>
			)
		}
		<main
			class:list={{ "px-[80px] pb-16 medium:px-[40px] small:px-[20px]": !customLayout }}
			class="font-[family-name:--base-font] text-[length:--font-size] leading-[--line-height] text-[color:--base-color] dark:text-[color:--dark-base-color]"
		>
			<div
				class:list={[
					{ "blog-article m-auto": !customLayout },
					{ "max-w-prose": !cormorant && !customLayout && !wide },
					{ "max-w-[75ch]": cormorant && !customLayout && !wide },
					{ "max-w-[700px]": wide },
				]}
			>
				{article.data.toc && <TableOfContents headings={headings} depth={article.data.depth} />}
				<slot />
			</div>
		</main>
	</div>
</BaseLayout>

<style
	lang="scss"
	define:vars={{ displayFont: palette.displayFont, headingsFont: palette.headingsFont }}
	is:global
>
	.article-styling {
		h1 {
			font-family: var(--displayFont);
		}
		h2,
		h3,
		h4,
		h5,
		h6 {
			font-family: var(--headingsFont);
		}
	}
</style>

<style
	define:vars={{
		secondaryColor: palette.secondaryColor,
		specialColor: palette.specialColor,
		fontSize: palette.fontSize,
		mentionBgColor: palette.mentionBgColor,
		mentionHoverBgColor: palette.mentionHoverBgColor,
	}}
	is:global
>
	blockquote,
	.note,
	.license,
	hr,
	.special-color {
		color: var(--specialColor);
	}
	figcaption,
	.secondary-color {
		color: var(--secondaryColor);
	}
	.text-normal-size {
		font-size: var(--fontSize);
	}
	.bg-mention {
		background-color: var(--mentionBgColor);
	}
	.bg-mention:hover {
		background-color: var(--mentionHoverBgColor);
	}
</style>
