---
import { getEntry, type CollectionEntry } from "astro:content"
import BaseLayout from "./BaseLayout.astro"
import getPalette, { getColor } from "$utils/design/palettes"
import ArticleHeader from "$components/articles/ArticleHeader.astro"
import TableOfContents from "$components/articles/TableOfContents.astro"
import type { MarkdownHeading } from "astro"
import "$styles/article-layers.css"
import "$styles/hyphenation.css"
import getRelatedArticles from "$utils/getRelatedArticles"
import NavbarAccessFooter from "$components/navbar/NavbarAccessFooter.astro"
import getSeeAlso from "$utils/getSeeAlso"
import GenerateSidenotes from "$components/sidenotes/GenerateSidenotes.astro"

interface Props {
	article: CollectionEntry<"blog" | "pages" | "diary">
	collection: "blog" | "pages" | "diary"
	headings: MarkdownHeading[]
}

const { article, collection, headings } = Astro.props
const data = article.data
const date = "date" in data ? data.date : undefined
const wide = data.tags.find((tag) => tag.slug == "photos") && !data.forceNarrow
// Alternative layouts
const customLayout = data.customLayout
const sidenotes = data.sidenotes
if (sidenotes && headings.at(-1)?.text == "Notes") headings.pop()
// Images
const ogImage = data.opengraph || data.image
const coverImage = data.cover && data.image ? data.image : undefined
const palette = getPalette(data.palette)
// Related articles
const relatedArticles = async () => {
	switch (collection) {
		case "blog":
			return (await getRelatedArticles(article as CollectionEntry<"blog">)).map((a) => ({
				title: a.article.data.title,
				href: `/${a.article.slug}`,
			}))
		case "pages":
			return await getSeeAlso(data.seeAlso)
		default:
			return undefined
	}
}
const parent = collection == "pages" && data.parent && (await getEntry("pages", data.parent))
---

<BaseLayout
	ogType="article"
	title={data.title}
	description={data.description}
	date={date}
	image={ogImage?.src}
	bg={palette.bgColor}
	popupBorderColor={palette.popupBorderColor}
	popupLabelActiveBgColor={palette.popupLabelActiveBgColor}
	codeTheme={palette.codeTheme}
	paletteName={palette.name}
	layout={data.layouts}
	navBarProps={{
		title: data.title,
		parent:
			collection == "blog"
				? { title: "Blog", href: "/blog" }
				: parent
					? { title: parent.data.title, href: `/${parent.slug}` }
					: undefined,
		related: await relatedArticles(),
		relatedTitle: collection == "blog" ? "Articles similaires" : "Voir aussi",
		headings: headings,
	}}
>
	<div
		class:list={["article-styling notw", { "with-sidenotes": sidenotes }]}
		style={{
			"--base-color": getColor(palette.baseColor),
			"--dark-base-color": getColor(palette.baseColor, "dark"),
			"--secondary-color": getColor(palette.secondaryColor),
			"--dark-secondary-color": getColor(palette.secondaryColor, "dark"),
			"--special-color": getColor(palette.specialColor),
			"--dark-special-color": getColor(palette.specialColor, "dark"),
			"--bg-color": getColor(palette.bgColor),
			"--dark-bg-color": getColor(palette.bgColor, "dark"),
			"--border-color": getColor(palette.popupBorderColor),
			"--dark-border-color": getColor(palette.popupBorderColor, "dark"),
			"--bg-mention-color": getColor(palette.mentionBgColor),
			"--dark-bg-mention-color": getColor(palette.mentionBgColor, "dark"),
			"--bg-mention-hover-color": getColor(palette.mentionHoverBgColor),
			"--dark-bg-mention-hover-color": getColor(palette.mentionHoverBgColor, "dark"),
			"--base-font": palette.baseFont,
			"--code-font": palette.codeFont,
			"--font-size": palette.fontSize,
			"--sm-font-size": "16px",
			"--code-font-size": palette.codeFontSize,
			"--line-height": palette.lineHeight,
			"--sm-line-height": palette.lineHeight * 1.1,
			"--indent": "calc(var(--font-size) * var(--line-height))",
			"--sm-indent": "calc(var(--sm-font-size) * var(--sm-line-height))",
			"--page-width": palette.pageWidth,
			"--internal-link-decoration": palette.internalLinks,
		}}
	>
		<ArticleHeader
			title={data.title}
			description={data.description}
			tags={data.tags}
			date={date}
			cover={coverImage}
			palette={palette}
			layouts={data.layouts}
			sidenotes={Boolean(sidenotes)}
			wide={wide}
			anchorTop={data.imageAnchorTop}
		/>
		<main
			class:list={{
				"px-[80px] pb-16 medium:px-[40px] small:px-[20px]": !customLayout && !sidenotes,
				"m-auto max-w-[calc(var(--page-width)*1.5+4em)] xl:max-w-none xl:px-[80px] xl:pb-16 medium:px-[40px] small:px-[20px]":
					sidenotes,
			}}
			class="font-[family-name:--base-font] text-[length:--font-size] leading-[--line-height] text-[color:--base-color] small:text-[length:--sm-font-size] small:leading-[--sm-line-height] dark:text-[color:--dark-base-color]"
		>
			<div
				class:list={[
					{ "xl:m-auto": sidenotes },
					{ "m-auto": !customLayout && !sidenotes },
					{ "max-w-[--page-width]": !customLayout && !wide },
					{ "max-w-[700px]": wide },
				]}
			>
				{article.data.toc && <TableOfContents headings={headings} depth={article.data.depth} />}
				<slot />
				{!customLayout && <NavbarAccessFooter />}
			</div>
		</main>
	</div>
</BaseLayout>

<style
	define:vars={{ displayFont: palette.displayFont, headingsFont: palette.headingsFont }}
	is:global
>
	.article-styling {
		h1 {
			font-family: var(--displayFont);
		}
		h2,
		h3,
		h4,
		h5,
		h6 {
			font-family: var(--headingsFont);
		}
	}
</style>

{
	data.sidenotes && !data.sidenotes.layoutOnly && (
		<GenerateSidenotes
			label={data.sidenotes.label}
			toggle={data.sidenotes.toggle}
			visible={data.sidenotes.visible}
			removeFootnotes={data.sidenotes.removeFootnotes}
		/>
	)
}
