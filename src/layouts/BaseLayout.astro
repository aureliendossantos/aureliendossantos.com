---
import "$styles/fonts"
import "$styles/tailwind.css"
import "$styles/icons.css"
import { ClientRouter } from "astro:transitions"
import MediumZoom from "$components/MediumZoom.astro"
import FullscreenSpinner from "$components/wiki/FullscreenSpinner.astro"
import GoogleStructuredData from "$components/meta/GoogleStructuredData.astro"
import NavBar from "$components/navbar/NavBar.astro"
import type { NavBarProps } from "$utils/navbar"
import type { Layouts } from "$utils/design/layouts"
import { getColor, type Color, getBothColors, PaletteName } from "$utils/design/palettes"
import type { ShikiConfig } from "astro"

export interface Props {
	title: string
	description?: string
	date?: Date
	image?: string
	layout?: Layouts[]
	bg?: Color
	popupBorderColor?: Color
	popupLabelActiveBgColor?: Color
	font?: "Work Sans" | "Sofia Sans"
	codeTheme?: ShikiConfig["theme"]
	paletteName?: PaletteName
	navBarProps?: NavBarProps
	ssr?: boolean
	viewportCover?: boolean
	ogType:
		| "website"
		| "article"
		| "profile"
		| "book"
		| "video.movie"
		| "video.other"
		| "music.album"
		| "music.playlist"
}
const {
	title,
	description,
	date,
	image,
	layout,
	bg,
	popupBorderColor,
	popupLabelActiveBgColor,
	font,
	codeTheme,
	paletteName,
	navBarProps,
	ssr,
	viewportCover,
	ogType,
} = Astro.props

// Base website URL (minus slash at the end) + image URL
const ogImageURL = image && Astro.site?.toString().replace(/\/$/, "") + image
const icon = "❦"

const background = getColor(bg) || "#f5f5fa"
const darkBackground = getColor(bg, "dark") || "#17182f"
const { light: popupBorder, dark: darkPopupBorder } = getBothColors(popupBorderColor)
const { light: popupLabelActiveBg, dark: darkPopupActive } = getBothColors(popupLabelActiveBgColor)

const lang = Astro.currentLocale == "fr" ? "fr-FR" : "en-US"

// A page might not send props.
let navBarPropsWithFallback = navBarProps || { title: title }
// A page might also send props without a title. In that case,
// we want to fallback to the page title.
navBarPropsWithFallback.title ??= title
---

<!doctype html>
<html {lang} data-theme={codeTheme} data-palette={paletteName}>
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
		<meta name="author" content="Aurélien Dos Santos" />
		<meta name="generator" content={Astro.generator} />
		<link rel="canonical" href={Astro.url} />
		<link
			rel="alternate"
			type="application/rss+xml"
			href="/rss.xml"
			title="Blog d'Aurélien Dos Santos"
		/>
		<title>{title} · Aurélien Dos Santos</title>
		{description && <meta name="description" content={description} />}
		<meta name="theme-color" media="(prefers-color-scheme: light)" content={background} />
		<meta name="theme-color" media="(prefers-color-scheme: dark)" content={darkBackground} />
		<link
			rel="icon"
			href=`data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><text text-anchor="middle" x="50" y="80" font-size="90">${icon}</text></svg>`
		/>
		<meta property="og:title" content={title} />
		{description && <meta property="og:description" content={description} />}
		<meta property="og:url" content={Astro.url} />
		<meta property="og:site_name" content="Aurélien Dos Santos" />
		<meta property="og:type" content={ogType} />
		<meta property="og:locale" content="fr_FR" />
		{
			ogType == "article" && date && (
				<meta property="article:published_time" content={date.toISOString()} />
			)
		}
		{
			ogType == "article" && date && (
				<meta property="article:modified_time" content={date.toISOString()} />
			)
		}
		{image && <meta property="og:image" content={ogImageURL} />}
		<meta name="twitter:site" content="@ooooorelien" />
		<meta name="twitter:creator" content="@ooooorelien" />
		<meta name="twitter:title" content={title} />
		{description && <meta name="twitter:description" content={description} />}
		<meta name="twitter:card" content={image ? "summary_large_image" : "summary"} />
		{image && <meta name="twitter:image" content={ogImageURL} />}
		{ogType == "article" && <GoogleStructuredData title={title} image={image} date={date} />}
		<ClientRouter />
	</head>
	<body
		class:list={[
			layout,
			"bg-[--bg] dark:bg-[--dark-bg]",
			{
				"font-sans": !font,
				"font-work-sans": font == "Work Sans",
				"font-sofia-sans": font == "Sofia Sans",
			},
		]}
		style={{
			"--bg": background,
			"--dark-bg": darkBackground,
			"--popup": popupBorder,
			"--dark-popup": darkPopupBorder,
			"--popup-active": popupLabelActiveBg,
			"--dark-popup-active": darkPopupActive,
			paddingLeft: viewportCover ? 0 : "env(safe-area-inset-left)",
			paddingRight: viewportCover ? 0 : "env(safe-area-inset-right)",
		}}
	>
		<slot />
		<FullscreenSpinner />
		<MediumZoom />
		<NavBar {viewportCover} {ssr} {...navBarPropsWithFallback} />
		<style is:global>
			[data-icon] {
				width: unset;
			}
		</style>
	</body>
</html>
