---
import "$styles/components-utilities.scss"
import { ViewTransitions } from "astro:transitions"
// Serif
import "@fontsource/lora"
import "@fontsource/vollkorn"
// Sans serif
import "@fontsource/lato"
import "@fontsource/noto-sans"
import "@fontsource/nunito"
import "@fontsource/nunito/700.css"
import "@fontsource/sofia-sans"
import "@fontsource/space-grotesk"
import "@fontsource/space-grotesk/700.css"
import "@fontsource/urbanist"
import "@fontsource/urbanist/400-italic.css"
import "@fontsource/work-sans"
import "@fontsource/work-sans/500.css"
import "@fontsource/work-sans/600.css"
import "@fontsource/work-sans/700.css"
import "@fontsource/work-sans/400-italic.css"
import "@fontsource/work-sans/700-italic.css"
// Monospace
import "@fontsource/source-code-pro"
import "@fontsource/space-mono"
import "@fontsource/space-mono/400-italic.css"
// Custom fonts
import "$styles/fonts/anek-latin.css"
import "$styles/fonts/et-book.css"
import "$styles/fonts/source-serif.css"

export interface Props {
	title: string
	description?: string
	date?: Date
	image?: string
	layout?: string[]
	text?: string
	bg?: string
	bgDark?: string
	popupColor?: string
	popupActiveColor?: string
	font?: "Work Sans"
	ogType:
		| "website"
		| "article"
		| "profile"
		| "book"
		| "video.movie"
		| "video.other"
		| "music.album"
		| "music.playlist"
}
const {
	title,
	description,
	date,
	image,
	layout,
	text,
	bg,
	bgDark,
	popupColor,
	popupActiveColor,
	font,
	ogType,
} = Astro.props

// Base website URL (minus slash at the end) + image URL
const ogImageURL = image && Astro.site?.toString().replace(/\/$/, "") + image

const defaultBackground = bg || "#f5f5fa"
const darkBackground = bgDark || bg || "#17182f"

const googleStructuredData = {
	"@context": "https://schema.org",
	"@type": "BlogPosting",
	headline: title,
	image: [{ image }],
	author: {
		"@type": "Person",
		name: "Aurélien Dos Santos",
		url: "https://aureliendossantos.com",
	},
	/* the schema expects Date or DateTime using ISO 8601 format. For Date that is yyyy-MM-dd */
	...(date && {
		datePublished: date.toISOString().substring(0, 10),
		dateModified: date.toISOString().substring(0, 10),
	}),
}
---

<!doctype html>
<html lang="fr">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="author" content="Aurélien Dos Santos" />
		<meta name="generator" content={Astro.generator} />
		<link rel="canonical" href={Astro.url} />
		<link
			rel="alternate"
			type="application/rss+xml"
			href="/rss.xml"
			title="Blog d'Aurélien Dos Santos"
		/>
		<title>{title} - Aurélien Dos Santos</title>
		{description && <meta name="description" content={description} />}
		{bg && <meta name="theme-color" content={bg} />}
		<meta property="og:title" content={title} />
		{description && <meta property="og:description" content={description} />}
		<meta property="og:url" content={Astro.url} />
		<meta property="og:site_name" content="Aurélien Dos Santos" />
		<meta property="og:type" content={ogType} />
		<meta property="og:locale" content="fr_FR" />
		{
			ogType == "article" && date && (
				<meta property="article:published_time" content={date.toISOString()} />
			)
		}
		{
			ogType == "article" && date && (
				<meta property="article:modified_time" content={date.toISOString()} />
			)
		}
		{image && <meta property="og:image" content={ogImageURL} />}
		<meta name="twitter:site" content="@ooooorelien" />
		<meta name="twitter:creator" content="@ooooorelien" />
		<meta name="twitter:title" content={title} />
		{description && <meta name="twitter:description" content={description} />}
		<meta name="twitter:card" content={image ? "summary_large_image" : "summary"} />
		{image && <meta name="twitter:image" content={ogImageURL} />}
		{
			ogType == "article" && (
				<script type="application/ld+json" set:html={JSON.stringify(googleStructuredData)} />
			)
		}
		<ViewTransitions />
	</head>
	<body
		class:list={[
			layout,
			"bg-[--bg] dark:bg-[--darkbg]",
			{
				"text-[--text]": text,
				"dark:text-slate-200": !text,
				"font-sans": !font,
				"font-work-sans": font == "Work Sans",
			},
		]}
		style={{
			"--text": text,
			"--bg": defaultBackground,
			"--darkbg": darkBackground,
			"--popup": popupColor,
			"--popup-active": popupActiveColor,
		}}
	>
		<slot />
		<script>
			import mediumZoom from "medium-zoom"
			window.mediumZoom = mediumZoom("[data-zoomable]", {
				margin: 24,
				background: "var(--bg)",
			})
		</script>

		<style is:global>
			.medium-zoom-overlay,
			.medium-zoom-image--opened {
				z-index: 999;
			}
		</style>
	</body>
</html>
